<title>Manage coupons - miniTorque</title>
<link href="https://cdn.jsdelivr.net/npm/remixicon@4.3.0/fonts/remixicon.css" rel="stylesheet">
<link rel="icon" type="image/png" href="/images/miniTorque.png.png"/>
<%- include("../partials/sidebar") %>


<div class="main-content">
  <div class="page-header d-flex justify-content-between align-items-center">
    <div>
      <h1 class="page-title">Manage Coupons</h1>
      <p class="text-muted mb-0">View and manage discount coupons</p>
    </div>
    <div class="d-flex align-items-center">
      <div class="search-container me-3">
        <i class="ri-search-line search-icon"></i>
        <input type="text" id="couponSearch" class="search-input" placeholder="Search coupons..." value="<%= filters.search %>">
      </div>
      <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#addCouponModal">
        <i class="ri-add-line me-1"></i> Add New Coupon
      </button>
      <button class="toggle-sidebar d-lg-none ms-2">
        <i class="ri-menu-line"></i>
      </button>
    </div>
  </div>

  <!-- Coupon Filters -->
  <div class="filters-container mb-3">
    <div class="d-flex flex-wrap gap-2">
      <select class="form-select filter-select" id="statusFilter">
        <option value="all" <%= filters.status === 'all' ? 'selected' : '' %>>All Status</option>
        <option value="active" <%= filters.status === 'active' ? 'selected' : '' %>>Active</option>
        <option value="inactive" <%= filters.status === 'inactive' ? 'selected' : '' %>>Inactive</option>
        <option value="expired" <%= filters.status === 'expired' ? 'selected' : '' %>>Expired</option>
      </select>
      <select class="form-select filter-select" id="typeFilter">
        <option value="all" <%= filters.type === 'all' ? 'selected' : '' %>>All Types</option>
        <option value="percentage" <%= filters.type === 'percentage' ? 'selected' : '' %>>Percentage</option>
        <option value="fixed" <%= filters.type === 'fixed' ? 'selected' : '' %>>Fixed Amount</option>
      </select>
    </div>
  </div>

  <!-- Coupons Table Card -->
  <div class="content-card">
    <div class="table-responsive">
      <table class="coupons-table" id="couponsTable">
        <thead>
          <tr>
            <th>Code</th>
            <th>Discount</th>
            <th>Min Order</th>
            <th>Validity</th>
            <th>Usage</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
<tbody>
  <% if (coupons && coupons.length > 0) { %>
    <% coupons.forEach(coupon => { %>
      <% 
        const isExpired = new Date(coupon.expiry) < new Date();
        const status = isExpired ? 'expired' : (coupon.isActive ? 'active' : 'inactive');
      %>
      <tr data-coupon-id="<%= coupon._id %>"> 
        <td class="coupon-code"><%= coupon.code %></td>
        <td>
          <% if (coupon.discountType === 'percentage') { %>
            <%= coupon.discount %>% (Max ₹<%= coupon.maxDiscount || 'Unlimited' %>) 
          <% } else { %>
            ₹<%= coupon.discount %> Off 
          <% } %>
        </td>
        <td>₹<%= coupon.minPurchase %></td> 
        <td>
          <div class="validity-dates">
            <div>From: <span><%= new Date(coupon.startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></span></div>
            <div>To: <span><%= new Date(coupon.expiry).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) %></span></div> 
          </div>
        </td>
        <td>
          <%= coupon.usedCount %> / <%= coupon.usageLimit || 'Unlimited' %> 
        </td>
        <td>
          <span class="status-badge <%= status %>">
            <%= status.charAt(0).toUpperCase() + status.slice(1) %>
          </span>
        </td>
        <td>
          <div class="action-buttons">
            <button class="btn-icon btn-edit-coupon" data-bs-toggle="modal" data-bs-target="#editCouponModal" data-coupon-id="<%= coupon._id %>" title="Edit"> 
              <i class="ri-pencil-line"></i>
            </button>
            <button class="btn-icon btn-toggle-status" data-coupon-id="<%= coupon._id %>" title="<%= coupon.isActive ? 'Deactivate' : 'Activate' %>"> 
              <i class="ri-<%= coupon.isActive ? 'eye-off' : 'eye' %>-line"></i>
            </button>
            <button class="btn-icon btn-view-details" data-bs-toggle="modal" data-bs-target="#viewCouponModal" data-coupon-id="<%= coupon._id %>" title="View Details"> 
              <i class="ri-information-line"></i>
            </button>
          </div>
        </td>
      </tr>
    <% }) %>
  <% } else { %>
    <tr>
      <td colspan="7" class="text-center text-muted">No coupons found.</td>
    </tr>
  <% } %>
</tbody>


      </table>
    </div>

    <!-- Pagination -->
    <div class="d-flex justify-content-between align-items-center p-3">
      <div class="text-muted small">
        Showing <%= pagination.start %>-<%= pagination.end %> of <%= pagination.totalCoupons %> coupons
      </div>
      <nav aria-label="Coupon pagination">
        <ul class="pagination mb-0">
          <li class="page-item <%= pagination.hasPrev ? '' : 'disabled' %>">
            <a class="page-link" href="?page=<%= pagination.prevPage %>&status=<%= filters.status %>&type=<%= filters.type %>&search=<%= filters.search %>" aria-label="Previous">
              <span aria-hidden="true">«</span>
            </a>
          </li>
          <% pagination.pages.forEach(page => { %>
            <li class="page-item <%= page === pagination.currentPage ? 'active' : '' %>">
              <a class="page-link" href="?page=<%= page %>&status=<%= filters.status %>&type=<%= filters.type %>&search=<%= filters.search %>"><%= page %></a>
            </li>
          <% }) %>
          <li class="page-item <%= pagination.hasNext ? '' : 'disabled' %>">
            <a class="page-link" href="?page=<%= pagination.nextPage %>&status=<%= filters.status %>&type=<%= filters.type %>&search=<%= filters.search %>" aria-label="Next">
              <span aria-hidden="true">»</span>
            </a>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</div>

<!-- Add Coupon Modal -->
<div class="modal fade" id="addCouponModal" tabindex="-1" aria-labelledby="addCouponModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addCouponModalLabel">Add New Coupon</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
  <form id="addCouponForm" method="POST" action="/admin/coupons/add">
  <div class="row">
    <div class="col-md-6 mb-3">
      <label for="couponCode" class="form-label">Coupon Code*</label>
      <input type="text" class="form-control" id="couponCode" name="code" placeholder="e.g. SUMMER20" required>
      <small class="text-muted">Must be unique and uppercase</small>
    </div>
    <div class="col-md-6 mb-3">
      <label for="couponStatus" class="form-label">Status</label>
      <select class="form-select" id="couponStatus" name="isActive">
        <option value="true" selected>Active</option>
        <option value="false">Inactive</option>
      </select>
    </div>
  </div>

  <div class="mb-3">
    <label for="couponDescription" class="form-label">Description</label>
    <textarea class="form-control" id="couponDescription" name="description" rows="2" placeholder="Brief description of the coupon"></textarea>
  </div>

  <div class="row">
    <div class="col-md-6 mb-3">
      <label for="discountType" class="form-label">Discount Type*</label>
      <select class="form-select" id="discountType" name="discountType" required>
        <option value="">Select Discount Type</option>
        <option value="percentage">Percentage Discount</option>
        <option value="flat">Fixed Amount Discount</option> 
      </select>
    </div>
    <div class="col-md-6 mb-3">
      <label for="discountValue" class="form-label">Discount Value*</label>
      <div class="input-group">
        <span class="input-group-text discount-symbol">%</span>
        <input type="number" class="form-control" id="discountValue" name="discount" min="0" step="1" required> 
      </div>
    </div>
  </div>

  <div class="row percentage-options">
    <div class="col-md-6 mb-3">
      <label for="maxDiscountValue" class="form-label">Maximum Discount</label>
      <div class="input-group">
        <span class="input-group-text">₹</span>
        <input type="number" class="form-control" id="maxDiscountValue" name="maxDiscount" min="0"> 
      </div>
      <small class="text-muted">For percentage discounts</small>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6 mb-3">
      <label for="minOrderAmount" class="form-label">Minimum Order Amount</label>
      <div class="input-group">
        <span class="input-group-text">₹</span>
        <input type="number" class="form-control" id="minOrderAmount" name="minPurchase" min="0" value="0"> 
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6 mb-3">
      <label for="startDate" class="form-label">Start Date*</label>
      <input type="date" class="form-control" id="startDate" name="startDate" required>
    </div>
    <div class="col-md-6 mb-3">
      <label for="expiryDate" class="form-label">Expiry Date*</label>
      <input type="date" class="form-control" id="expiryDate" name="expiry" required>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6 mb-3">
      <label for="usageLimitGlobal" class="form-label">Global Usage Limit</label>
      <input type="number" class="form-control" id="usageLimitGlobal" name="usageLimit" min="0" placeholder="Leave blank for unlimited"> 
    </div>
    <div class="col-md-6 mb-3">
      <label for="usageLimitPerUser" class="form-label">Usage Limit Per User*</label>
      <input type="number" class="form-control" id="usageLimitPerUser" name="userUsageLimit" min="1" value="1" required> 
    </div>
  </div>

  <div class="mb-3">
    <label class="form-label">Applicable Categories</label>
    <div class="categories-container p-2 border rounded">
      <div class="form-check">
        <input class="form-check-input" type="checkbox" value="all" id="addAllCategories" name="allCategories" checked>
        <label class="form-check-label" for="addAllCategories">
          All Categories
        </label>
      </div>
      <hr>
      <div class="category-checkboxes">
        <% if (categories && categories.length > 0) { %>
          <% categories.forEach(category => { %>
            <div class="form-check">
              <input class="form-check-input category-checkbox" type="checkbox" value="<%= category._id %>" id="addCategory_<%= category._id %>" name="applicableCategories" disabled>
              <label class="form-check-label" for="addCategory_<%= category._id %>">
                <%= category.name %>
              </label>
            </div>
          <% }) %>
        <% } else { %>
          <div class="text-muted fst-italic small">No categories available.</div>
        <% } %>
      </div>
    </div>
  </div>

  <div class="mb-3">
    <label class="form-label">Applicable Products</label>
    <div class="products-container p-2 border rounded">
      <div class="form-check">
        <input class="form-check-input" type="checkbox" value="all" id="addAllProducts" name="allProducts" checked>
        <label class="form-check-label" for="addAllProducts">
          All Products
        </label>
      </div>
      <hr>
      <div class="product-search mb-2">
        <input type="text" class="form-control form-control-sm" id="addProductSearch" placeholder="Search products..." disabled>
      </div>
      <div class="product-checkboxes" id="addProductCheckboxes">
        <% if (products && products.length > 0) { %>
          <% products.forEach(product => { %>
            <div class="form-check">
              <input class="form-check-input product-checkbox" type="checkbox" value="<%= product._id %>" id="addProduct_<%= product._id %>" name="applicableProducts" disabled>
              <label class="form-check-label" for="addProduct_<%= product._id %>">
                <%= product.productName %>
              </label>
            </div>
          <% }) %>
        <% } else { %>
          <div class="text-muted fst-italic small">No products available.</div>
        <% } %>
      </div>
    </div>
  </div>
</form>


      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="createCouponBtn">Create Coupon</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit Coupon Modal -->
<div class="modal fade" id="editCouponModal" tabindex="-1" aria-labelledby="editCouponModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editCouponModalLabel">Edit Coupon</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
  <form id="editCouponForm" method="POST">
  <input type="hidden" id="editCouponId" name="id">
  <div class="row">
    <div class="col-md-6 mb-3">
      <label for="editCouponCode" class="form-label">Coupon Code*</label>
      <input type="text" class="form-control" id="editCouponCode" name="code" required>
      <small class="text-muted">Must be unique and uppercase</small>
    </div>
    <div class="col-md-6 mb-3">
      <label for="editCouponStatus" class="form-label">Status</label>
      <select class="form-select" id="editCouponStatus" name="isActive">
        <option value="true">Active</option>
        <option value="false">Inactive</option>
      </select>
    </div>
  </div>
  <div class="mb-3">
    <label for="editCouponDescription" class="form-label">Description</label>
    <textarea class="form-control" id="editCouponDescription" name="description" rows="2"></textarea>
  </div>
  <div class="row">
    <div class="col-md-6 mb-3">
      <label for="editDiscountType" class="form-label">Discount Type*</label>
      <select class="form-select" id="editDiscountType" name="discountType" required>
        <option value="">Select Discount Type</option>
        <option value="percentage">Percentage Discount</option>
        <option value="flat">Fixed Amount Discount</option> 
      </select>
    </div>
    <div class="col-md-6 mb-3">
      <label for="editDiscountValue" class="form-label">Discount Value*</label>
      <div class="input-group">
        <span class="input-group-text edit-discount-symbol">%</span>
        <input type="number" class="form-control" id="editDiscountValue" name="discount" min="0" step="1" required> 
      </div>
    </div>
  </div>
  <div class="row edit-percentage-options">
    <div class="col-md-6 mb-3">
      <label for="editMaxDiscountValue" class="form-label">Maximum Discount</label>
      <div class="input-group">
        <span class="input-group-text">₹</span>
        <input type="number" class="form-control" id="editMaxDiscountValue" name="maxDiscount" min="0"> 
      </div>
      <small class="text-muted">For percentage discounts</small>
    </div>
  </div>
  <div class="row">
    <div class="col-md-6 mb-3">
      <label for="editMinOrderAmount" class="form-label">Minimum Order Amount</label>
      <div class="input-group">
        <span class="input-group-text">₹</span>
        <input type="number" class="form-control" id="editMinOrderAmount" name="minPurchase" min="0"> 
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-md-6 mb-3">
      <label for="editStartDate" class="form-label">Start Date*</label>
      <input type="date" class="form-control" id="editStartDate" name="startDate" required>
    </div>
    <div class="col-md-6 mb-3">
      <label for="editExpiryDate" class="form-label">Expiry Date*</label>
      <input type="date" class="form-control" id="editExpiryDate" name="expiry" required>
    </div>
  </div>
  <div class="row">
    <div class="col-md-6 mb-3">
      <label for="editUsageLimitGlobal" class="form-label">Global Usage Limit</label>
      <input type="number" class="form-control" id="editUsageLimitGlobal" name="usageLimit" min="0" placeholder="Leave blank for unlimited"> 
    </div>
    <div class="col-md-6 mb-3">
      <label for="editUsageLimitPerUser" class="form-label">Usage Limit Per User*</label>
      <input type="number" class="form-control" id="editUsageLimitPerUser" name="userUsageLimit" min="1" value="1" required> 
    </div>
  </div>
  <div class="mb-3">
    <label class="form-label">Applicable Categories</label>
    <div class="categories-container p-2 border rounded">
      <div class="form-check">
        <input class="form-check-input" type="checkbox" value="all" id="editAllCategories" name="allCategories">
        <label class="form-check-label" for="editAllCategories">
          All Categories
        </label>
      </div>
      <hr>
      <div class="category-checkboxes">
        <% if (categories && categories.length > 0) { %>
          <% categories.forEach(category => { %>
            <div class="form-check">
              <input class="form-check-input edit-category-checkbox" type="checkbox" value="<%= category._id %>" id="editCategory_<%= category._id %>" name="applicableCategories">
              <label class="form-check-label" for="editCategory_<%= category._id %>">
                <%= category.name %>
              </label>
            </div>
          <% }) %>
        <% } else { %>
          <div class="text-muted fst-italic small">No categories available.</div>
        <% } %>
      </div>
    </div>
  </div>
  <div class="mb-3">
    <label class="form-label">Applicable Products</label>
    <div class="products-container p-2 border rounded">
      <div class="form-check">
        <input class="form-check-input" type="checkbox" value="all" id="editAllProducts" name="allProducts">
        <label class="form-check-label" for="editAllProducts">
          All Products
        </label>
      </div>
      <hr>
      <div class="product-search mb-2">
        <input type="text" class="form-control form-control-sm" id="editProductSearch" placeholder="Search products...">
      </div>
      <div class="product-checkboxes" id="editProductCheckboxes">
        <% if (products && products.length > 0) { %>
          <% products.forEach(product => { %>
            <div class="form-check">
              <input class="form-check-input edit-product-checkbox" type="checkbox" value="<%= product._id %>" id="editProduct_<%= product._id %>" name="applicableProducts">
              <label class="form-check-label" for="editProduct_<%= product._id %>">
                <%= product.productName %>
              </label>
            </div>
          <% }) %>
        <% } else { %>
          <div class="text-muted fst-italic small">No products available.</div>
        <% } %>
      </div>
    </div>
  </div>
</form>


      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" id="updateCouponBtn">Update Coupon</button>
      </div>
    </div>
  </div>
</div>

<!-- View Coupon Details Modal -->
<div class="modal fade" id="viewCouponModal" tabindex="-1" aria-labelledby="viewCouponModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="viewCouponModalLabel">Coupon Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="coupon-details">
          <div class="detail-row">
            <div class="detail-label">Code:</div>
            <div class="detail-value" id="viewCouponCode"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Description:</div>
            <div class="detail-value" id="viewCouponDescription"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Discount:</div>
            <div class="detail-value" id="viewCouponDiscount"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Min Order Amount:</div>
            <div class="detail-value" id="viewMinOrderAmount"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Valid From:</div>
            <div class="detail-value" id="viewStartDate"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Valid Until:</div>
            <div class="detail-value" id="viewExpiryDate"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Usage:</div>
            <div class="detail-value" id="viewUsage"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Per User Limit:</div>
            <div class="detail-value" id="viewUsageLimitPerUser"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Status:</div>
            <div class="detail-value" id="viewStatus"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Applies To:</div>
            <div class="detail-value" id="viewAppliesTo"></div>
          </div>
          <div class="detail-row">
            <div class="detail-label">Created:</div>
            <div class="detail-value" id="viewCreatedAt"></div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary btn-edit-from-view" data-bs-toggle="modal" data-bs-target="#editCouponModal">Edit</button>
      </div>
    </div>
  </div>
</div>

<style>
  /* Additional CSS for the Coupon page */
  .content-card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    margin-bottom: 20px;
  }
  
  .search-container {
    position: relative;
  }
  
  .search-icon {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: #6c757d;
  }
  
  .search-input {
    padding: 8px 10px 8px 35px;
    border-radius: 6px;
    border: 1px solid #ddd;
    width: 250px;
  }
  
  .filter-select {
    width: auto;
    min-width: 150px;
  }
  
  .filters-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .coupons-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .coupons-table th, 
  .coupons-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #eee;
  }
  
  .coupons-table th {
    background-color: #f8f9fa;
    font-weight: 600;
  }
  
  .coupon-code {
    font-family: monospace;
    font-weight: 600;
    letter-spacing: 0.5px;
  }
  
  .validity-dates {
    font-size: 13px;
  }
  
  .status-badge {
    display: inline-block;
    padding: 3px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
  }
  
  .status-badge.active {
    background-color: #e1f7e1;
    color: #28a745;
  }
  
  .status-badge.inactive {
    background-color: #f8f9fa;
    color: #6c757d;
  }
  
  .status-badge.expired {
    background-color: #fff3cd;
    color: #856404;
  }
  .action-buttons {
    display: flex;
    gap: 8px;
    align-items: center;
    justify-content: center;
    min-width: 120px;
  }
  
  .btn-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 34px;
    height: 34px;
    padding: 8px;
    cursor: pointer;
    border: 2px solid #dee2e6;
    border-radius: 6px;
    background-color: #ffffff;
    color: #6c757d;
    font-size: 16px;
    transition: all 0.3s ease;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }
  
  .btn-icon:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
  .btn-edit-coupon {
    color: #007bff;
    border-color: #007bff;
  }
  
  .btn-edit-coupon:hover {
    background-color: #007bff;
    color: white;
    border-color: #007bff;
  }
  
  .btn-toggle-status {
    color: #28a745;
    border-color: #28a745;
  }
  
  .btn-toggle-status:hover {
    background-color: #28a745;
    color: white;
    border-color: #28a745;
  }
  
  .btn-view-details {
    color: #17a2b8;
    border-color: #17a2b8;
  }
  
  .btn-view-details:hover {
    background-color: #17a2b8;
    color: white;
    border-color: #17a2b8;
  }
  .btn-icon i {
    font-size: 16px;
    line-height: 1;
    pointer-events: none;
  }
  
  /* Modal Styles */
  .modal-title {
    font-weight: 600;
  }
  
  .categories-container, 
  .products-container {
    max-height: 200px;
    overflow-y: auto;
  }
  
  /* Coupon details in view modal */
  .coupon-details {
    padding: 10px;
  }
  
  .detail-row {
    display: flex;
    margin-bottom: 10px;
    border-bottom: 1px solid #f1f1f1;
    padding-bottom: 8px;
  }
  
  .detail-label {
    width: 40%;
    font-weight: 500;
    color: #495057;
  }
  
  .detail-value {
    width: 60%;
  }
  
  /* Responsive adjustments */
  @media (max-width: 992px) {
    .search-input {
      width: 180px;
    }
    
    .filters-container {
      flex-direction: column;
      align-items: stretch;
    }
    
    .filter-select {
      width: 100%;
    }
  }
  
  @media (max-width: 768px) {
    .page-header {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .page-header > div:last-child {
      margin-top: 15px;
      width: 100%;
    }
    
    .search-input {
      width: 100%;
    }
    
    /*  MOBILE RESPONSIVENESS FOR BUTTONS */
    .action-buttons {
      flex-direction: column;
      gap: 4px;
      min-width: auto;
    }
    
    .btn-icon {
      width: 30px;
      height: 30px;
    }
  }
</style>


<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.0.19/dist/sweetalert2.all.min.js"></script>
<!-- Add validation script -->
<script src="/js/coupon-frontend-validation.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Discount type toggle for Add Coupon Modal
  const discountType = document.getElementById('discountType');
  const discountSymbol = document.querySelector('#addCouponModal .discount-symbol');
  const percentageOptions = document.querySelector('#addCouponModal .percentage-options');
  
  if (discountType && discountSymbol) {
    discountType.addEventListener('change', function() {
      if (this.value === 'percentage') {
        discountSymbol.textContent = '%';
        if (percentageOptions) percentageOptions.style.display = 'flex';
      } else {
        discountSymbol.textContent = '₹';
        if (percentageOptions) percentageOptions.style.display = 'none';
      }
    });
  }

  // Discount type toggle for Edit Coupon Modal
  const editDiscountType = document.getElementById('editDiscountType');
  const editDiscountSymbol = document.querySelector('#editCouponModal .edit-discount-symbol');
  const editPercentageOptions = document.querySelector('#editCouponModal .edit-percentage-options');
  
  if (editDiscountType && editDiscountSymbol) {
    editDiscountType.addEventListener('change', function() {
      if (this.value === 'percentage') {
        editDiscountSymbol.textContent = '%';
        if (editPercentageOptions) editPercentageOptions.style.display = 'flex';
      } else {
        editDiscountSymbol.textContent = '₹';
        if (editPercentageOptions) editPercentageOptions.style.display = 'none';
      }
    });
  }

  // Category functionality
  const addAllCategories = document.getElementById('addAllCategories');
  const addCategoryCheckboxes = document.querySelectorAll('#addCouponModal .category-checkbox');
  
  if (addAllCategories) {
    addAllCategories.addEventListener('change', function() {
      addCategoryCheckboxes.forEach(checkbox => {
        checkbox.disabled = this.checked;
        if (this.checked) checkbox.checked = false;
      });
    });
  }

  const editAllCategories = document.getElementById('editAllCategories');
  const editCategoryCheckboxes = document.querySelectorAll('#editCouponModal .edit-category-checkbox');
  
  if (editAllCategories) {
    editAllCategories.addEventListener('change', function() {
      editCategoryCheckboxes.forEach(checkbox => {
        checkbox.disabled = this.checked;
        if (this.checked) checkbox.checked = false;
      });
    });
  }

  // Search and filter functionality
  function debounce(func, delay) {
    let timeoutId;
    return function (...args) {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => func.apply(this, args), delay);
    };
  }

  const couponSearch = document.getElementById('couponSearch');
  if (couponSearch) {
    const debouncedSearch = debounce(function(searchTerm) {
      const url = new URL(window.location.href);
      url.searchParams.set('search', searchTerm);
      url.searchParams.set('page', 1);
      window.location.href = url.toString();
    }, 500);

    couponSearch.addEventListener('input', function() {
      debouncedSearch(this.value.toLowerCase());
    });
  }

  const statusFilter = document.getElementById('statusFilter');
  const typeFilter = document.getElementById('typeFilter');
  
  if (statusFilter && typeFilter) {
    statusFilter.addEventListener('change', applyFilters);
    typeFilter.addEventListener('change', applyFilters);
    
    function applyFilters() {
      const url = new URL(window.location.href);
      url.searchParams.set('status', statusFilter.value);
      url.searchParams.set('type', typeFilter.value);
      url.searchParams.set('page', 1);
      window.location.href = url.toString();
    }
  }

  //  Toggle Status - Proper status detection
  document.querySelectorAll('.btn-toggle-status').forEach(button => {
    button.addEventListener('click', function() {
      const couponId = this.getAttribute('data-coupon-id');
      const row = this.closest('tr');
      const statusBadge = row.querySelector('.status-badge');
      
      //  Check status from status badge, not icon
      const isCurrentlyActive = statusBadge && statusBadge.classList.contains('active');
      const action = isCurrentlyActive ? 'deactivate' : 'activate';

      Swal.fire({
        title: 'Are you sure?',
        text: `Do you want to ${action} this coupon?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: `Yes, ${action} it!`
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin/coupons/${couponId}/toggle-status`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Success!', data.message, 'success').then(() => {
                window.location.reload();
              });
            } else {
              Swal.fire('Error!', data.message, 'error');
            }
          })
          .catch(error => {
            console.error('Toggle error:', error);
            Swal.fire('Error!', 'Failed to toggle coupon status.', 'error');
          });
        }
      });
    });
  });

  //  View Details - Complete implementation
  document.querySelectorAll('.btn-view-details').forEach(button => {
    button.addEventListener('click', function() {
      const couponId = this.getAttribute('data-coupon-id');
      
      fetch(`/admin/coupons/${couponId}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const coupon = data.coupon;
            
            // Populate view modal safely
            const updateElement = (id, value) => {
              const element = document.getElementById(id);
              if (element) element.textContent = value;
            };
            
            const updateHTML = (id, html) => {
              const element = document.getElementById(id);
              if (element) element.innerHTML = html;
            };
            
            updateElement('viewCouponModalLabel', `Coupon Details: ${coupon.code}`);
            updateElement('viewCouponCode', coupon.code);
            updateElement('viewCouponDescription', coupon.description || 'N/A');
            updateElement('viewCouponDiscount', coupon.discountType === 'percentage' 
              ? `${coupon.discount}% (Maximum ₹${coupon.maxDiscount || 'Unlimited'})` 
              : `₹${coupon.discount} Off`);
            updateElement('viewMinOrderAmount', `₹${coupon.minPurchase}`);
            updateElement('viewStartDate', new Date(coupon.startDate).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }));
            updateElement('viewExpiryDate', new Date(coupon.expiry).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }));
            updateElement('viewUsage', `${coupon.usedCount} used / ${coupon.usageLimit || 'Unlimited'} total`);
            updateElement('viewUsageLimitPerUser', `${coupon.userUsageLimit || 1} use${coupon.userUsageLimit > 1 ? 's' : ''} per user`);
            
            const isExpired = new Date(coupon.expiry) < new Date();
            const status = isExpired ? 'expired' : (coupon.isActive ? 'active' : 'inactive');
            updateHTML('viewStatus', `<span class="status-badge ${status}">${status.charAt(0).toUpperCase() + status.slice(1)}</span>`);
            
            let appliesTo = [];
            if (coupon.applicableCategories.length === 0 && coupon.applicableProducts.length === 0) {
              appliesTo.push('All Categories & Products');
            } else {
              if (coupon.applicableCategories.length > 0) {
                appliesTo.push(`${coupon.applicableCategories.length} Categories`);
              }
              if (coupon.applicableProducts.length > 0) {
                appliesTo.push(`${coupon.applicableProducts.length} Products`);
              }
            }
            updateElement('viewAppliesTo', appliesTo.join(', '));
            updateElement('viewCreatedAt', new Date(coupon.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }));
            
            //  Set coupon ID for Edit button in view modal
            const editFromViewBtn = document.querySelector('.btn-edit-from-view');
            if (editFromViewBtn) {
              editFromViewBtn.setAttribute('data-coupon-id', coupon._id);
            }
          } else {
            Swal.fire('Error!', data.message || 'Failed to load coupon details.', 'error');
          }
        })
        .catch(error => {
          console.error('View details error:', error);
          Swal.fire('Error!', 'Failed to load coupon details.', 'error');
        });
    });
  });

  //  Edit Coupon - Both table edit and view modal edit
  document.addEventListener('click', function(e) {
    if (e.target.closest('.btn-edit-coupon') || e.target.closest('.btn-edit-from-view')) {
      const button = e.target.closest('.btn-edit-coupon') || e.target.closest('.btn-edit-from-view');
      const couponId = button.getAttribute('data-coupon-id');
      
      //  If editing from view modal, close it first and open edit modal
      if (button.classList.contains('btn-edit-from-view')) {
        const viewModal = document.getElementById('viewCouponModal');
        const editModal = document.getElementById('editCouponModal');
        
        if (viewModal && editModal) {
          // Close view modal
          const viewModalInstance = bootstrap.Modal.getInstance(viewModal);
          if (viewModalInstance) {
            viewModalInstance.hide();
          }
          
          // Wait for close animation, then open edit modal
          setTimeout(() => {
            const editModalInstance = new bootstrap.Modal(editModal);
            editModalInstance.show();
          }, 300);
        }
      }
      
      // Load coupon data
      fetch(`/admin/coupons/${couponId}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const coupon = data.coupon;
            
            // Populate edit form safely
            const setFormValue = (id, value) => {
              const element = document.getElementById(id);
              if (element) element.value = value || '';
            };
            
            const setTextContent = (id, value) => {
              const element = document.getElementById(id);
              if (element) element.textContent = value;
            };
            
            setTextContent('editCouponModalLabel', `Edit Coupon: ${coupon.code}`);
            setFormValue('editCouponId', coupon._id);
            setFormValue('editCouponCode', coupon.code);
            setFormValue('editCouponStatus', coupon.isActive.toString());
            setFormValue('editCouponDescription', coupon.description);
            setFormValue('editDiscountType', coupon.discountType);
            setFormValue('editDiscountValue', coupon.discount);
            
            // Handle discount type display
            if (coupon.discountType === 'percentage') {
              if (editDiscountSymbol) editDiscountSymbol.textContent = '%';
              if (editPercentageOptions) editPercentageOptions.style.display = 'flex';
              setFormValue('editMaxDiscountValue', coupon.maxDiscount);
            } else {
              if (editDiscountSymbol) editDiscountSymbol.textContent = '₹';
              if (editPercentageOptions) editPercentageOptions.style.display = 'none';
            }

            setFormValue('editMinOrderAmount', coupon.minPurchase);
            setFormValue('editStartDate', new Date(coupon.startDate).toISOString().split('T')[0]);
            setFormValue('editExpiryDate', new Date(coupon.expiry).toISOString().split('T')[0]);
            setFormValue('editUsageLimitGlobal', coupon.usageLimit);
            setFormValue('editUsageLimitPerUser', coupon.userUsageLimit);
            
            // Handle categories
            if (editAllCategories) {
              if (coupon.applicableCategories.length === 0) {
                editAllCategories.checked = true;
                editCategoryCheckboxes.forEach(checkbox => {
                  checkbox.disabled = true;
                  checkbox.checked = false;
                });
              } else {
                editAllCategories.checked = false;
                editCategoryCheckboxes.forEach(checkbox => {
                  checkbox.disabled = false;
                  checkbox.checked = coupon.applicableCategories.some(cat => cat._id === checkbox.value);
                });
              }
            }
          } else {
            Swal.fire('Error!', data.message || 'Failed to load coupon for editing.', 'error');
          }
        })
        .catch(error => {
          console.error('Edit coupon error:', error);
          Swal.fire('Error!', 'Failed to load coupon for editing.', 'error');
        });
    }
  });

  //  Create Coupon Button Handler
const createCouponBtn = document.getElementById('createCouponBtn');
if (createCouponBtn) {
  createCouponBtn.addEventListener('click', function() {
    const form = document.getElementById('addCouponForm');
    if (form && !form.checkValidity()) {
      form.reportValidity();
      return;
    }

    const couponData = {
      code: document.getElementById('couponCode').value.toUpperCase(),
      isActive: document.getElementById('couponStatus').value === 'true',
      description: document.getElementById('couponDescription').value,
      discountType: document.getElementById('discountType').value,
      discount: parseFloat(document.getElementById('discountValue').value),
      maxDiscount: document.getElementById('discountType').value === 'percentage' && document.getElementById('maxDiscountValue').value ? parseFloat(document.getElementById('maxDiscountValue').value) : null,
      minPurchase: parseFloat(document.getElementById('minOrderAmount').value) || 0,
      startDate: document.getElementById('startDate').value, 
      expiry: document.getElementById('expiryDate').value, 
      usageLimit: document.getElementById('usageLimitGlobal').value ? parseInt(document.getElementById('usageLimitGlobal').value) : null,
      userUsageLimit: parseInt(document.getElementById('usageLimitPerUser').value) || 1,
      applicableCategories: addAllCategories && addAllCategories.checked ? [] : Array.from(addCategoryCheckboxes).filter(cb => cb.checked).map(cb => cb.value),
      applicableProducts: []
    };

    console.log('ADD COUPON DATA:', couponData); 

    fetch('/admin/coupons', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(couponData),
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        Swal.fire('Success!', data.message || 'Coupon created successfully!', 'success').then(() => {
          window.location.reload();
        });
      } else {
        console.log(' VALIDATION ERRORS:', data.errors); 
        Swal.fire('Error!', data.message, 'error');
      }
    })
    .catch(error => {
      console.error('Create coupon error:', error);
      Swal.fire('Error!', 'Failed to create coupon.', 'error');
    });
  });
}


  //  Update Coupon Button Handler
  const updateCouponBtn = document.getElementById('updateCouponBtn');
  if (updateCouponBtn) {
    updateCouponBtn.addEventListener('click', function() {
      const form = document.getElementById('editCouponForm');
      if (form && !form.checkValidity()) {
        form.reportValidity();
        return;
      }

      const couponId = document.getElementById('editCouponId').value;
      
      const couponData = {
        code: document.getElementById('editCouponCode').value.toUpperCase(),
        isActive: document.getElementById('editCouponStatus').value === 'true',
        description: document.getElementById('editCouponDescription').value,
        discountType: document.getElementById('editDiscountType').value,
        discount: parseFloat(document.getElementById('editDiscountValue').value),
        maxDiscount: document.getElementById('editDiscountType').value === 'percentage' && document.getElementById('editMaxDiscountValue').value ? parseFloat(document.getElementById('editMaxDiscountValue').value) : null,
        minPurchase: parseFloat(document.getElementById('editMinOrderAmount').value) || 0,
        startDate: new Date(document.getElementById('editStartDate').value),
        expiry: new Date(document.getElementById('editExpiryDate').value),
        usageLimit: document.getElementById('editUsageLimitGlobal').value ? parseInt(document.getElementById('editUsageLimitGlobal').value) : null,
        userUsageLimit: parseInt(document.getElementById('editUsageLimitPerUser').value) || 1,
        applicableCategories: editAllCategories && editAllCategories.checked ? [] : Array.from(editCategoryCheckboxes).filter(cb => cb.checked).map(cb => cb.value),
        applicableProducts: []
      };

      fetch(`/admin/coupons/${couponId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(couponData),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          Swal.fire('Success!', data.message || 'Coupon updated successfully!', 'success').then(() => {
            window.location.reload();
          });
        } else {
          Swal.fire('Error!', data.message, 'error');
        }
      })
      .catch(error => {
        console.error('Update coupon error:', error);
        Swal.fire('Error!', 'Failed to update coupon.', 'error');
      });
    });
  }

  // Initialize Bootstrap tooltips
  const tooltipTriggerList = document.querySelectorAll('[title]');
  if (typeof bootstrap !== 'undefined' && bootstrap.Tooltip) {
    tooltipTriggerList.forEach(tooltipTriggerEl => {
      new bootstrap.Tooltip(tooltipTriggerEl);
    });
  }
});
</script>




