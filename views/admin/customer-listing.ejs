<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Customer Management - miniTorque</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet"/>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet"/>
  <link rel="icon" type="image/png" href="/images/miniTorque.png.png"/>
  <link rel="stylesheet" href="/css/admin/customer-listing.css"/>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <%- include("../partials/sidebar") %>

  <div class="main-content">
    <nav aria-label="breadcrumb" class="mb-3">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/admin-dashboard">Dashboard</a></li>
        <li class="breadcrumb-item active" aria-current="page">Customer Management</li>
      </ol>
    </nav>

    <div class="page-header">
      <div class="header-content">
        <div class="header-left">
          <h1 class="page-title">Customer Management</h1>
          <p class="page-subtitle">Manage and view all registered customers</p>
        </div>
      </div>
    </div>

    <!-- Filters -->
    <div class="filters-card">
      <div class="filters-header">
        <h3 class="filters-title"><i class="fas fa-search"></i> Search & Filter Customers</h3>
      </div>
      <div class="filters-grid">
        <div class="filter-group">
          <label class="filter-label" for="customerSearch">Search Customers</label>
          <div class="search-input-wrapper">
            <input type="text" id="customerSearch" class="form-control search-input" placeholder="Search by name or email..." value="<%= searchTerm %>">
          </div>
        </div>
        <div class="filter-group">
          <label class="filter-label" for="statusFilter">Status Filter</label>
          <select id="statusFilter" class="form-select">
            <option value="" <%= statusFilter === '' ? 'selected' : '' %>>All Status</option>
            <option value="active" <%= statusFilter === 'active' ? 'selected' : '' %>>Active</option>
            <option value="blocked" <%= statusFilter === 'blocked' ? 'selected' : '' %>>Blocked</option>
          </select>
        </div>
        <div class="filter-group filter-actions">
          <button type="button" class="filter-btn primary" onclick="applyFilters()"><i class="fas fa-filter"></i> Apply Filters</button>
          <button type="button" class="filter-btn secondary" onclick="resetFilters()"><i class="fas fa-refresh"></i> Reset</button>
        </div>
      </div>
    </div>

    <!-- Table -->
    <div class="customers-card">
      <div class="card-header">
        <div class="header-left">
          <h3 class="card-title"><i class="fas fa-list"></i> Customer Directory</h3>
          <p class="card-subtitle">Complete list of registered customers</p>
        </div>
        <div class="header-right">
          <div class="customer-count">
            <span class="count-badge" id="filteredCustomerCount"><%= totalUsers %> total customers</span>
          </div>
        </div>
      </div>
      <div id="loadingState" class="loading-state" style="display:none;">
        <div class="loading-content"><i class="fas fa-spinner fa-spin"></i><p>Loading customers...</p></div>
      </div>
      <div class="table-wrapper" id="tableWrapper">
        <table class="modern-table">
          <thead>
            <tr>
              <th>Customer</th>
              <th>Email</th>
              <th>Join Date</th>
              <th>Status</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="customersTableBody">
            <% users.forEach(user => { %>
              <tr>
                <td>
                  <div class="customer-info">
                    <div class="customer-avatar"><%= user.displayName ? user.displayName.charAt(0).toUpperCase() : user.email.charAt(0).toUpperCase() %></div>
                    <div class="customer-details">
                      <div class="customer-name"><%= user.displayName || user.email.split('@')[0] %></div>
                      <div class="customer-id">ID: <%= user._id.toString().slice(-6) %></div>
                    </div>
                  </div>
                </td>
                <td><div class="email-cell"><i class="fas fa-envelope"></i> <span><%= user.email %></span></div></td>
                <td><div class="date-cell"><i class="fas fa-calendar-alt"></i> <span><%= new Date(user.createdAt).toLocaleDateString() %></span></div></td>
                <td>
                  <div class="status-display">
                    <span class="status-badge status-<%= user.isBlocked ? 'blocked' : 'active' %>">
                      <i class="fas fa-<%= user.isBlocked ? 'ban' : 'check-circle' %>"></i>
                      <span><%= user.isBlocked ? 'Blocked' : 'Active' %></span>
                    </span>
                  </div>
                </td>
                <td>
                  <div class="action-buttons">
                    <button class="btn btn-sm <%= user.isBlocked ? 'btn-success' : 'btn-warning' %>"
                      onclick="toggleCustomerStatus('<%= user._id %>', <%= user.isBlocked %>)"
                      title="<%= user.isBlocked ? 'Activate Customer' : 'Block Customer' %>">
                      <i class="fas fa-<%= user.isBlocked ? 'check' : 'ban' %>"></i>
                    </button>
                  </div>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div class="pagination-wrapper">
        <div class="pagination-info">
          Showing <span id="showingStart"><%= startIdx + 1 %></span> to <span id="showingEnd"><%= endIdx %></span> of <span id="totalCustomers"><%= totalUsers %></span> customers
        </div>
        <nav aria-label="Customer pagination">
          <ul class="pagination" id="pagination">
            <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>" id="prevPage">
              <a class="page-link" href="#"><i class="fas fa-chevron-left"></i></a>
            </li>
            <% for (let i=1; i<=totalPages; i++) { %>
              <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                <a class="page-link" href="#" onclick="goToPage(<%= i %>)"><%= i %></a>
              </li>
            <% } %>
            <li class="page-item <%= currentPage === totalPages || totalPages === 0 ? 'disabled' : '' %>" id="nextPage">
              <a class="page-link" href="#"><i class="fas fa-chevron-right"></i></a>
            </li>
          </ul>
        </nav>
      </div>
    </div>
  </div>

<script>
let currentState = { page: <%= currentPage %>, totalPages: <%= totalPages %>, totalUsers: <%= totalUsers %>, isLoading: false };

function showLoading(){ if(currentState.isLoading) return; currentState.isLoading=true; loadingState.style.display="block"; tableWrapper.style.opacity="0.5"; }
function hideLoading(){ currentState.isLoading=false; loadingState.style.display="none"; tableWrapper.style.opacity="1"; }

function handleError(e,msg){ console.error(e); hideLoading(); Swal.fire({title:"Error",text:msg,icon:"error"}); }

async function fetchWithErrorHandling(url,opt={}){ const r=await fetch(url,{headers:{'Content-Type':'application/json',...(opt.headers||{})},...opt}); if(!r.ok){throw new Error((await r.json().catch(()=>({}))).message||`HTTP ${r.status}`);} return r.json(); }

async function fetchUsers(){
  if(currentState.isLoading) return;
  showLoading();
  try{
    const q=new URLSearchParams({ search: customerSearch.value.trim(), page: currentState.page, status: statusFilter.value });
    const data=await fetchWithErrorHandling(`/admin/get-users?${q}`);
    if(!data.success) throw new Error(data.message||'Failed to load');
    currentState.totalPages=data.totalPages||1; currentState.totalUsers=data.totalUsers||0;
    renderCustomersTable(data.users||[], data);
  }catch(e){ handleError(e,'Failed to load customers.'); }
  finally{ hideLoading(); }
}

function renderCustomersTable(users,pd){
  const body=customersTableBody; body.innerHTML='';
  if(!users.length){ body.innerHTML=`<tr><td colspan="5" class="empty-state"><div class="empty-content"><i class="fas fa-users"></i><h5>No customers found</h5><p>Try adjusting filters.</p></div></td></tr>`; filteredCustomerCount.textContent='0 customers found'; updatePaginationInfo(0,0,pd.totalUsers||0); updatePagination(); return; }
  users.forEach(u=>{
    const name = u.displayName || (u.fullName && u.fullName.trim()!=='' ? u.fullName : u.email.split('@')[0]);
    body.innerHTML += `<tr>
      <td><div class="customer-info"><div class="customer-avatar">${name.charAt(0).toUpperCase()}</div><div class="customer-details"><div class="customer-name">${name}</div><div class="customer-id">ID: ${u._id.toString().slice(-6)}</div></div></div></td>
      <td><div class="email-cell"><i class="fas fa-envelope"></i> <span>${u.email}</span></div></td>
      <td><div class="date-cell"><i class="fas fa-calendar-alt"></i> <span>${new Date(u.createdAt).toLocaleDateString()}</span></div></td>
      <td><div class="status-display"><span class="status-badge status-${u.isBlocked?'blocked':'active'}"><i class="fas fa-${u.isBlocked?'ban':'check-circle'}"></i> <span>${u.isBlocked?'Blocked':'Active'}</span></span></div></td>
      <td><div class="action-buttons"><button class="btn btn-sm ${u.isBlocked?'btn-success':'btn-warning'}" onclick="toggleCustomerStatus('${u._id}', ${u.isBlocked})" title="${u.isBlocked?'Activate Customer':'Block Customer'}"><i class="fas fa-${u.isBlocked?'check':'ban'}"></i></button></div></td>
    </tr>`;
  });
  filteredCustomerCount.textContent=`${pd.totalUsers} total customers`;
  updatePaginationInfo(pd.startIdx+1,pd.endIdx,pd.totalUsers); updatePagination();
}

function updatePaginationInfo(s,e,t){ showingStart.textContent=s||0; showingEnd.textContent=e||0; totalCustomers.textContent=t||0; }
function updatePagination(){ document.querySelectorAll('#pagination .page-item:not(#prevPage):not(#nextPage)').forEach(l=>l.remove()); for(let i=1;i<=currentState.totalPages;i++){ const li=document.createElement('li'); li.className=`page-item ${i===currentState.page?'active':''}`; li.innerHTML=`<a class="page-link" href="#" onclick="goToPage(${i})">${i}</a>`; pagination.insertBefore(li,nextPage);} prevPage.classList.toggle('disabled',currentState.page===1); nextPage.classList.toggle('disabled',currentState.page===currentState.totalPages||currentState.totalPages===0); }

async function toggleCustomerStatus(userId, isBlocked){
  if(currentState.isLoading) return;
  const action = isBlocked ? 'unblock' : 'block';
  const actionText = isBlocked ? 'activate' : 'block';
  try{
    const result = await Swal.fire({ title:'Confirm Status Change', text:`Are you sure you want to ${actionText} this customer?`, icon:'question', showCancelButton:true, confirmButtonColor:'#000', cancelButtonColor:'#6c757d', confirmButtonText:`Yes, ${actionText}`, cancelButtonText:'Cancel'});
    if(!result.isConfirmed) return;
    showLoading();
    const data=await fetchWithErrorHandling(`/admin/get-users/${userId}/${action}`, {method:'PUT'});
    if(!data.success) throw new Error(data.message||`Failed to ${action} user`);
    // Immediate UI update
    const rowBtn = document.querySelector(`button[onclick="toggleCustomerStatus('${userId}', ${isBlocked})"]`);
    if(rowBtn){
      const row = rowBtn.closest('tr');
      // update status cell
      const statusCell = row.querySelector('.status-badge');
      if(statusCell){
        statusCell.className = `status-badge status-${isBlocked?'active':'blocked'}`;
        statusCell.innerHTML = isBlocked ? `<i class="fas fa-check-circle"></i> <span>Active</span>` : `<i class="fas fa-ban"></i> <span>Blocked</span>`;
      }
      // update button
      rowBtn.className = `btn btn-sm ${isBlocked?'btn-warning':'btn-success'}`;
      rowBtn.setAttribute('onclick', `toggleCustomerStatus('${userId}', ${!isBlocked})`);
      rowBtn.setAttribute('title', isBlocked?'Block Customer':'Activate Customer');
      rowBtn.innerHTML = `<i class="fas fa-${isBlocked?'ban':'check'}"></i>`;
    }
    await Swal.fire({title:'Success!', text:`Customer has been ${actionText}d successfully.`, icon:'success', confirmButtonColor:'#000'});
    await fetchUsers();
  }catch(e){ handleError(e,`Failed to ${actionText} customer.`); }
  finally{ hideLoading(); }
}

function applyFilters(){ currentState.page=1; fetchUsers(); }
function resetFilters(){ customerSearch.value=''; statusFilter.value=''; currentState.page=1; fetchUsers(); }
function goToPage(page){ if(currentState.isLoading||page<1||page>currentState.totalPages) return; currentState.page=page; fetchUsers(); }
function debounce(fn,delay){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), delay); }; }

document.addEventListener('DOMContentLoaded', ()=>{
  customerSearch.addEventListener('input', debounce(()=>{currentState.page=1;fetchUsers();},300));
  statusFilter.addEventListener('change', debounce(()=>{currentState.page=1;fetchUsers();},100));
  prevPage.addEventListener('click',e=>{e.preventDefault(); if(currentState.page>1){currentState.page--;fetchUsers();}});
  nextPage.addEventListener('click',e=>{e.preventDefault(); if(currentState.page<currentState.totalPages){currentState.page++;fetchUsers();}});
});
</script>
</body>
</html>
