<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Address Book</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <%- include("../partials/head") %>
    <!-- Shared Breadcrumb CSS -->
    <link rel="stylesheet" href="/css/breadcrumb.css">

    <link rel="icon" type="image/png" href="/images/miniTorque.png.png" />

    <%- include("../partials/user-sidebar") %>

    <link rel="stylesheet" href="/css/user/address-list.css">

</head>
<body>
    <!-- Main Content -->
    <div class="main-content fade-in">
        <!-- Breadcrumb -->
        <div class="breadcrumb-container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/profile">My Account</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Address Book</li>
                </ol>
            </nav>
        </div>

        <!-- Page Header -->
        <div class="page-header fade-in">
            <h1><i class="fas fa-map-marker-alt"></i> Address Book</h1>
            <p>Manage your delivery addresses for a seamless shopping experience</p>
        </div>

        <!-- Addresses Container -->
        <div class="addresses-container fade-in">
            <div class="addresses-header">
                <h2><i class="fas fa-home"></i> Saved Addresses</h2>
                <a href="/address/add" class="btn-add-address">
                    <i class="fas fa-plus"></i> Add New Address
                </a>
            </div>

            <% if (addresses && addresses.length > 0) { %>
                <div class="addresses-grid">
                    <% addresses.forEach(address => { %>
                        <div class="address-card">
                            <% if (address.isDefault) { %>
                                <div class="default-star">
                                    <i class="fas fa-star"></i>
                                </div>
                            <% } %>
                            <div class="address-badges">
                                <div class="address-type"><%= address.addressType %></div>
                            </div>
                            <div class="address-name"><%= address.name %></div>
                            <div class="address-details">
                                <%= address.landMark %>, <%= address.city %><br>
                                <%= address.state %> - <%= address.pincode %>
                            </div>
                            <div class="address-phone">
                                <i class="fas fa-phone"></i> <%= address.phone %>
                                <% if (address.altPhone) { %>
                                    | <%= address.altPhone %>
                                <% } %>
                            </div>
                            <div class="address-actions">
                                <% if (!address.isDefault) { %>
                                    <button class="btn-set-default" onclick="setAsDefault('<%= address._id %>')">
                                        <i class="fas fa-star"></i> Set as Default
                                    </button>
                                <% } %>
                                <a href="/address/edit/<%= address._id %>" class="btn-edit">
                                    <i class="fas fa-edit"></i> Edit
                                </a>
                                <button class="btn-delete" onclick="deleteAddress('<%= address._id %>')">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </div>
                        </div>
                    <% }) %>
                </div>
            <% } else { %>
                <div class="empty-state">
                    <i class="fas fa-map-marker-alt"></i>
                    <h3>No Addresses Found</h3>
                    <p>You haven't added any addresses yet. Add your first address to get started!</p>
                    <a href="/address/add" class="btn-add-address">
                        <i class="fas fa-plus"></i> Add Your First Address
                    </a>
                </div>
            <% } %>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    
    <!-- Toast Container -->
    <div id="toast-container" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999;"></div>
    
    <style>
        .toast {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            margin-bottom: 10px;
            padding: 16px 20px;
            min-width: 300px;
            max-width: 400px;
            display: flex;
            align-items: center;
            gap: 12px;
            transform: translateX(100%);
            transition: all 0.3s ease;
            border-left: 4px solid;
        }
        
        .toast.show {
            transform: translateX(0);
        }
        
        .toast.success {
            border-left-color: #10b981;
        }
        
        .toast.error {
            border-left-color: #ef4444;
        }
        
        .toast.warning {
            border-left-color: #f59e0b;
        }
        
        .toast.info {
            border-left-color: #3b82f6;
        }
        
        .toast-icon {
            font-size: 20px;
            flex-shrink: 0;
        }
        
        .toast.success .toast-icon {
            color: #10b981;
        }
        
        .toast.error .toast-icon {
            color: #ef4444;
        }
        
        .toast.warning .toast-icon {
            color: #f59e0b;
        }
        
        .toast.info .toast-icon {
            color: #3b82f6;
        }
        
        .toast-content {
            flex: 1;
        }
        
        .toast-title {
            font-weight: 600;
            margin-bottom: 4px;
            color: #111827;
        }
        
        .toast-message {
            color: #6b7280;
            font-size: 14px;
        }
        
        .toast-close {
            background: none;
            border: none;
            color: #9ca3af;
            cursor: pointer;
            font-size: 18px;
            padding: 0;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .toast-close:hover {
            color: #6b7280;
        }
    </style>
    
    <script>
        // Toast notification system
        function showToast(title, message, type = 'info', duration = 4000) {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            
            const icons = {
                success: 'fas fa-check-circle',
                error: 'fas fa-exclamation-circle',
                warning: 'fas fa-exclamation-triangle',
                info: 'fas fa-info-circle'
            };
            
            toast.innerHTML = `
                <div class="toast-icon">
                    <i class="${icons[type]}"></i>
                </div>
                <div class="toast-content">
                    <div class="toast-title">${title}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close" onclick="removeToast(this.parentElement)">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            container.appendChild(toast);
            
            // Trigger animation
            setTimeout(() => toast.classList.add('show'), 100);
            
            // Auto remove
            setTimeout(() => removeToast(toast), duration);
        }
        
        function removeToast(toast) {
            if (toast && toast.parentElement) {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.parentElement.removeChild(toast);
                    }
                }, 300);
            }
        }

        function setAsDefault(addressId) {
            Swal.fire({
                title: 'Set as Default?',
                text: 'This address will be automatically selected for your orders.',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#000000',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Set as Default',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/address/set-default/${addressId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast('Success!', data.message, 'success');
                            setTimeout(() => {
                                location.reload();
                            }, 1000);
                        } else {
                            showToast('Error!', data.message, 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Error!', 'An error occurred while setting default address', 'error');
                    });
                }
            });
        }

        function deleteAddress(addressId) {
            Swal.fire({
                title: 'Delete Address?',
                text: 'Are you sure you want to delete this address? This action cannot be undone.',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#dc3545',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Yes, Delete',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch(`/address/${addressId}`, {
                        method: 'DELETE',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast('Deleted!', data.message, 'success');
                            setTimeout(() => {
                                location.reload();
                            }, 1000);
                        } else {
                            showToast('Error!', data.message, 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Error!', 'An error occurred while deleting the address', 'error');
                    });
                }
            });
        }
    </script>
</body>
</html>