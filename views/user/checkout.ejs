<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout - miniTorque</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
        crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <link rel="icon" type="image/png" href="/images/miniTorque.png.png" />

    <link rel="stylesheet" href="/css/user/checkout.css">

    <%- include("../partials/head") %>

    <link rel="stylesheet" href="/css/breadcrumb.css">

</head>

<body>
    <div class="checkout-container">
        <!-- Breadcrumb -->
        <div class="breadcrumb-container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item"><a href="/shop">Shop</a></li>
                    <li class="breadcrumb-item"><a href="/cart">Cart</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Checkout</li>
                </ol>
            </nav>
        </div>

        <div class="checkout-content">
            <div class="checkout-main">
                <!-- Address Selection -->
                <div class="address-section fade-in">
                    <div class="section-header">
                        <h3 class="section-title">
                            <i class="fas fa-map-marker-alt"></i>
                            Delivery Address
                        </h3>
                        <a href="/address/add?returnTo=checkout" class="btn-add-address">
                            <i class="fas fa-plus"></i>
                            Add New Address
                        </a>
                    </div>

                    <% if (addresses && addresses.length > 0) { %>
                        <div class="addresses-grid">
                            <% addresses.forEach((address, index) => { %>
                                <div class="address-card <%= index === 0 ? 'selected' : '' %>"
                                    data-address-id="<%= address._id %>" onclick="selectAddress(this)">
                                    <% if (address.isDefault) { %>
                                        <div class="default-star">
                                            <i class="fas fa-star"></i>
                                        </div>
                                    <% } %>
                                    <div class="address-type"><%= address.addressType %></div>
                                    <div class="address-name"><%= address.name %></div>
                                    <div class="address-details">
                                        <%= address.landMark %>, <%= address.city %><br>
                                        <%= address.state %> - <%= address.pincode %>
                                    </div>
                                    <div class="address-phone">
                                        <i class="fas fa-phone"></i> <%= address.phone %>
                                    </div>
                                    <div class="address-actions">
                                        <a href="/address/edit/<%= address._id %>?returnTo=checkout" class="btn-edit">
                                            <i class="fas fa-edit"></i> Edit
                                        </a>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    <% } else { %>
                        <div class="text-center py-4">
                            <i class="fas fa-map-marker-alt fa-3x text-muted mb-3"></i>
                            <h5>No addresses found</h5>
                            <p class="text-muted">Please add a delivery address to continue</p>
                            <a href="/address/add?returnTo=checkout" class="btn-add-address">
                                <i class="fas fa-plus"></i>
                                Add Address
                            </a>
                        </div>
                    <% } %>
                </div>

                <!-- Products Section -->
                <div class="products-section fade-in">
                    <div class="section-header">
                        <h3 class="section-title">
                            <i class="fas fa-shopping-bag"></i>
                            Order Items (<%= cartItems.length %> items)
                        </h3>
                    </div>

                    <% cartItems.forEach(item => { %>
                        <%
                            const quantity = item.quantity;
                            
                            // Use offer details if available, otherwise fall back to sale price
                            let finalPrice = item.price || item.productId.salePrice;
                            let originalPrice = item.productId.salePrice;
                            let discountPercentage = 0;
                            let discountPerItem = 0;
                            
                            if (item.productId.offerDetails && item.productId.offerDetails.hasOffer) {
                                finalPrice = item.productId.offerDetails.finalPrice;
                                originalPrice = item.productId.offerDetails.originalPrice;
                                discountPercentage = item.productId.offerDetails.bestOfferPercentage;
                                discountPerItem = originalPrice - finalPrice;
                            }
                            
                            const itemTotal = finalPrice * quantity;
                            const totalDiscountForItem = discountPerItem * quantity;
                        %>
                        <div class="product-item">
                            <img src="/uploads/products/<%= item.productId.mainImage %>"
                                 alt="<%= item.productId.productName %>" class="product-image">
                            <div class="product-details">
                                <div class="product-name"><%= item.productId.productName %></div>
                                <div class="product-brand">Brand: <%= item.productId.brand %></div>
                                <div class="product-price">
                                    <span class="current-price">₹<%= Math.round(finalPrice) %></span>
                                    <% if (discountPerItem > 0) { %>
                                        <span class="original-price">₹<%= Math.round(originalPrice) %></span>
                                        <span class="discount-badge"><%= discountPercentage %>% OFF</span>
                                    <% } %>
                                </div>
                                <div class="quantity-info">
                                    Quantity: <%= quantity %> | Total: ₹<%= Math.round(itemTotal) %>
                                    <% if (totalDiscountForItem > 0) { %>
                                        <br><small style="color: var(--success-color);">You save: ₹<%= Math.round(totalDiscountForItem) %> on this item</small>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>

            <!-- Sidebar -->
            <div class="sidebar">
                <!-- Order Summary -->
                <div class="order-summary fade-in">
                    <h3 class="section-title mb-3">
                        <i class="fas fa-receipt"></i>
                        Order Summary
                    </h3>

                    <%
                        // Calculate totals similar to cart page
                        let totalItemCount = 0;
                        let availableItemsCount = 0;
                        let outOfStockItemsCount = 0;
                        let availableQuantity = 0;
                        let outOfStockQuantity = 0;
                        let subtotalFromRegularPrice = 0;
                        let totalDiscountAmount = 0;

                        cartItems.forEach(item => {
                            totalItemCount += item.quantity;
                            
                            // Check if item is out of stock
                            const isOutOfStock = item.productId.quantity === 0;
                            
                            if (isOutOfStock) {
                                outOfStockItemsCount++;
                                outOfStockQuantity += item.quantity;
                            } else {
                                availableItemsCount++;
                                availableQuantity += item.quantity;
                                
                                // Calculate discount based on regular price vs final price
                                const regularPrice = item.productId.regularPrice;
                                const finalPrice = item.price || item.productId.salePrice;
                                const quantity = item.quantity;
                                
                                // Subtotal based on regular prices
                                subtotalFromRegularPrice += regularPrice * quantity;
                                
                                // Calculate discount per item and total discount
                                const discountPerItem = regularPrice - finalPrice;
                                totalDiscountAmount += discountPerItem * quantity;
                            }
                        });
                    %>

                    <!-- Availability Breakdown (show only if there are out-of-stock items) -->
                    <% if (outOfStockItemsCount > 0) { %>
                        <div class="availability-breakdown">
                            <div class="breakdown-title">Cart Breakdown</div>
                            <div class="breakdown-item available">
                                <span><i class="bi bi-check-circle"></i> Available Items</span>
                                <span class="count"><%= availableItemsCount %> (<%= availableQuantity %> items)</span>
                            </div>
                            <div class="breakdown-item unavailable">
                                <span><i class="bi bi-x-circle"></i> Out of Stock</span>
                                <span class="count"><%= outOfStockItemsCount %> (<%= outOfStockQuantity %> items)</span>
                            </div>
                        </div>
                    <% } %>

                    <div class="summary-row">
                        <span class="summary-label">Subtotal (<%= totalItemCount %> items)</span>
                        <span class="summary-value">₹<%= Math.round(subtotalFromRegularPrice) %></span>
                    </div>

                    <div class="summary-row">
                        <span class="summary-label">Discount</span>
                        <span class="summary-value" style="color: var(--success-color);">
                            <% if (totalDiscountAmount > 0) { %>
                                -₹<%= Math.round(totalDiscountAmount) %>
                            <% } else { %>
                                ₹0.00
                            <% } %>
                        </span>
                    </div>

                    <div class="summary-row">
                        <span class="summary-label">Shipping</span>
                        <span class="summary-value">
                            <% if (orderSummary.shippingCharges === 0) { %>
                                <span style="color: var(--success-color);">FREE</span>
                            <% } else { %>
                                ₹<%= Math.round(orderSummary.shippingCharges) %>
                            <% } %>
                        </span>
                    </div>

                    <div class="summary-row">
                        <span class="summary-label">Total</span>
                        <span class="summary-value" id="finalTotal">₹<%= Math.round(orderSummary.finalAmount) %></span>
                    </div>

                    <!-- Payment Method Section -->
                    <div class="mt-3 pt-3" style="border-top: 2px solid var(--border-color);">
                        <h5 class="mb-3"
                            style="font-size: 1rem; font-weight: 600; color: var(--text-primary); display: flex; align-items: center; gap: 0.5rem;">
                            <i class="fas fa-credit-card"></i>
                            Payment Method
                        </h5>

                        <div class="payment-methods">
                            <!-- Wallet Payment -->
                            <div class="payment-option <%= (user.walletBalance && user.walletBalance >= orderSummary.finalAmount) ? '' : 'disabled' %>"
                                data-payment="Wallet" onclick="selectPaymentMethod(this)">
                                <div class="payment-header">
                                    <div class="payment-icon">
                                        <i class="fas fa-wallet"></i>
                                    </div>
                                    <div class="payment-title">Wallet Payment</div>
                                </div>
                                <div class="payment-description">Pay using your wallet balance</div>
                                <div class="payment-balance">Balance: ₹<%= Math.round(user.walletBalance || 0) %></div>
                                <% if (!user.walletBalance || user.walletBalance < orderSummary.finalAmount) { %>
                                    <div class="payment-insufficient">Insufficient balance</div>
                                <% } %>
                                <div class="payment-selected-indicator">
                                    <i class="fas fa-check"></i>
                                </div>
                            </div>

                            <!-- Online Payment -->
                            <div class="payment-option" data-payment="Online Payment" onclick="selectPaymentMethod(this)">
                                <div class="payment-header">
                                    <div class="payment-icon">
                                        <i class="fas fa-credit-card"></i>
                                    </div>
                                    <div class="payment-title">Online Payment</div>
                                </div>
                                <div class="payment-description">UPI, Cards, Net Banking & More</div>
                                <div class="payment-selected-indicator">
                                    <i class="fas fa-check"></i>
                                </div>
                            </div>

                            <!-- Cash on Delivery -->
                            <div class="payment-option <%= isCODAvailable ? 'selected' : 'disabled' %>"
                                data-payment="Cash on Delivery" onclick="selectPaymentMethod(this)">
                                <div class="payment-header">
                                    <div class="payment-icon">
                                        <i class="fas fa-money-bill-wave"></i>
                                    </div>
                                    <div class="payment-title">Cash on Delivery</div>
                                </div>
                                <div class="payment-description">Pay when your order is delivered</div>
                                <% if (!isCODAvailable) { %>
                                    <div class="payment-insufficient">Not available for orders above ₹2000</div>
                                <% } %>
                                <div class="payment-selected-indicator">
                                    <i class="fas fa-check"></i>
                                </div>
                            </div>
                        </div>
                    </div>

                    <button class="btn-place-order" onclick="placeOrder()" <%= addresses.length === 0 ? 'disabled' : '' %>>
                        <i class="fas fa-check-circle"></i>
                        Place Order
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.7/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ndDqU0Gzau9qJ1lfW4pNLlhNTkCfHzAVBReH9diLvGRem5+R9g2FzA8ZGN954O5Q"
        crossorigin="anonymous"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <!-- Toast Container -->
    <div id="toast-container" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999;"></div>

    <style>
        .toast {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            margin-bottom: 10px;
            padding: 16px 20px;
            min-width: 300px;
            max-width: 400px;
            display: flex;
            align-items: center;
            gap: 12px;
            transform: translateX(100%);
            transition: all 0.3s ease;
            border-left: 4px solid;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.success {
            border-left-color: #10b981;
        }

        .toast.error {
            border-left-color: #ef4444;
        }

        .toast.warning {
            border-left-color: #f59e0b;
        }

        .toast.info {
            border-left-color: #3b82f6;
        }

        .toast-icon {
            font-size: 20px;
            flex-shrink: 0;
        }

        .toast.success .toast-icon {
            color: #10b981;
        }

        .toast.error .toast-icon {
            color: #ef4444;
        }

        .toast.warning .toast-icon {
            color: #f59e0b;
        }

        .toast.info .toast-icon {
            color: #3b82f6;
        }

        .toast-content {
            flex: 1;
        }

        .toast-title {
            font-weight: 600;
            margin-bottom: 4px;
            color: #111827;
        }

        .toast-message {
            color: #6b7280;
            font-size: 14px;
        }

        .toast-close {
            background: none;
            border: none;
            color: #9ca3af;
            cursor: pointer;
            font-size: 18px;
            padding: 0;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .toast-close:hover {
            color: #6b7280;
        }
    </style>

    <script>
        // Toast notification system
        function showToast(title, message, type = 'info', duration = 4000) {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;

            const icons = {
                success: 'fas fa-check-circle',
                error: 'fas fa-exclamation-circle',
                warning: 'fas fa-exclamation-triangle',
                info: 'fas fa-info-circle'
            };

            toast.innerHTML = `
                <div class="toast-icon">
                    <i class="${icons[type]}"></i>
                </div>
                <div class="toast-content">
                    <div class="toast-title">${title}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close" onclick="removeToast(this.parentElement)">
                    <i class="fas fa-times"></i>
                </button>
            `;

            container.appendChild(toast);

            // Trigger animation
            setTimeout(() => toast.classList.add('show'), 100);

            // Auto remove
            setTimeout(() => removeToast(toast), duration);
        }

        function removeToast(toast) {
            if (toast && toast.parentElement) {
                toast.classList.remove('show');
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.parentElement.removeChild(toast);
                    }
                }, 300);
            }
        }

        let selectedAddressId = null;
        let selectedPaymentMethod = <% if (isCODAvailable) { %>'Cash on Delivery'<% } else { %>'Online Payment'<% } %>;
        let currentTotal = <%= orderSummary.finalAmount %>;
        let isCODAvailable = <%= isCODAvailable ? 'true' : 'false' %>;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function () {
            // Set first address as selected if available
            const firstAddress = document.querySelector('.address-card');
            if (firstAddress) {
                selectedAddressId = firstAddress.dataset.addressId;
            }

            // Set correct default payment method based on COD availability
            initializePaymentMethods();

            // Show toast notification if address operation was successful
            <% if (addressSuccess) { %>
                showToast('Success!', '<%= addressSuccess %>', 'success');
            <% } %>
        });

        // Initialize payment methods based on COD availability
        function initializePaymentMethods() {
            // Remove selected class from all payment options first
            document.querySelectorAll('.payment-option').forEach(option => {
                option.classList.remove('selected');
            });

            // Select appropriate default payment method
            if (isCODAvailable) {
                // COD is available, select it as default
                const codOption = document.querySelector('.payment-option[data-payment="Cash on Delivery"]');
                if (codOption && !codOption.classList.contains('disabled')) {
                    codOption.classList.add('selected');
                    selectedPaymentMethod = 'Cash on Delivery';
                }
            } else {
                // COD not available, select Online Payment as default
                const onlineOption = document.querySelector('.payment-option[data-payment="Online Payment"]');
                if (onlineOption && !onlineOption.classList.contains('disabled')) {
                    onlineOption.classList.add('selected');
                    selectedPaymentMethod = 'Online Payment';
                } else {
                    // Fallback to Wallet if available
                    const walletOption = document.querySelector('.payment-option[data-payment="Wallet"]');
                    if (walletOption && !walletOption.classList.contains('disabled')) {
                        walletOption.classList.add('selected');
                        selectedPaymentMethod = 'Wallet';
                    }
                }
            }
        }

        // Address selection
        function selectAddress(element) {
            // Remove selected class from all cards
            document.querySelectorAll('.address-card').forEach(card => {
                card.classList.remove('selected');
            });

            // Add selected class to clicked card
            element.classList.add('selected');
            selectedAddressId = element.dataset.addressId;

            // Enable place order button
            const placeOrderBtn = document.querySelector('.btn-place-order');
            placeOrderBtn.disabled = false;
        }

        // Payment method selection
        function selectPaymentMethod(element) {
            // Check if payment option is disabled
            if (element.classList.contains('disabled')) {
                return;
            }

            // Remove selected class from all payment options
            document.querySelectorAll('.payment-option').forEach(option => {
                option.classList.remove('selected');
            });

            // Add selected class to clicked option
            element.classList.add('selected');
            selectedPaymentMethod = element.dataset.payment;
        }

        // Place order
        async function placeOrder() {
            if (!selectedAddressId) {
                showToast('Address Required', 'Please select a delivery address', 'warning');
                return;
            }

            const placeOrderBtn = document.querySelector('.btn-place-order');
            const originalText = placeOrderBtn.innerHTML;

            // Show loading state
            placeOrderBtn.disabled = true;
            placeOrderBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Placing Order...';

            try {
                if (selectedPaymentMethod === 'Online Payment') {
                    // Handle Razorpay payment
                    await handleOnlinePayment();
                } else {
                    // Handle COD and Wallet payments
                    const response = await fetch('/checkout/place-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            selectedAddressId: selectedAddressId,
                            paymentMethod: selectedPaymentMethod,
                            finalAmount: currentTotal
                        })
                    });

                    const result = await response.json();

                    if (result.success) {
                        // Redirect to order success page
                        window.location.href = `/order-success/${result.orderId}`;
                    } else {
                        throw new Error(result.message || 'Failed to place order');
                    }
                }
            } catch (error) {
                console.error('Error placing order:', error);
                showToast('Order Failed', error.message || 'Failed to place order. Please try again.', 'error');

                // Reset button
                placeOrderBtn.disabled = false;
                placeOrderBtn.innerHTML = originalText;
            }
        }

        // Handle online payment with Razorpay
        async function handleOnlinePayment() {
            try {
                // Create Razorpay order
                const response = await fetch('/checkout/create-razorpay-order', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        selectedAddressId: selectedAddressId,
                        paymentMethod: 'Online Payment',
                        finalAmount: currentTotal
                    })
                });

                const result = await response.json();

                if (!result.success) {
                    throw new Error(result.message || 'Failed to create payment order');
                }

                // Initialize Razorpay
                const options = {
                    key: result.razorpayKeyId,
                    amount: result.amount,
                    currency: result.currency,
                    name: 'miniTorque',
                    description: 'Order Payment',
                    order_id: result.razorpayOrderId,
                    prefill: {
                        name: result.prefill.name,
                        email: result.prefill.email,
                        contact: result.prefill.contact
                    },
                    theme: {
                        color: '#000000'
                    },
                    handler: async function (response) {
                        // Payment successful - verify payment
                        try {
                            const verifyResponse = await fetch('/checkout/verify-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: result.orderId
                                })
                            });

                            const verifyResult = await verifyResponse.json();

                            if (verifyResult.success) {
                                // Payment verified successfully
                                showToast('Payment Successful!', 'Your payment has been processed successfully.', 'success');
                                setTimeout(() => {
                                    window.location.href = `/order-success/${result.orderId}`;
                                }, 2000);
                            } else {
                                throw new Error(verifyResult.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            console.error('Payment verification error:', error);

                            // Mark payment as failed and redirect to failure page
                            try {
                                await fetch('/checkout/payment-failed', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        orderId: result.orderId,
                                        error: { description: 'Payment verification failed' }
                                    })
                                });

                                // Redirect to failure page
                                window.location.href = `/order-failure/${result.orderId}`;
                            } catch (failureError) {
                                // Fallback: show toast if redirect fails
                                showToast('Payment Verification Failed', 'There was an issue verifying your payment. Please contact support.', 'error');
                            }
                        }
                    },
                    modal: {
                        ondismiss: async function () {
                            // Payment modal closed without completion - mark as failed
                            try {
                                await fetch('/checkout/payment-failed', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        orderId: result.orderId,
                                        error: { description: 'Payment cancelled by user' }
                                    })
                                });
                            } catch (error) {
                                console.error('Error marking payment as failed:', error);
                            }

                            // Reset button
                            const placeOrderBtn = document.querySelector('.btn-place-order');
                            placeOrderBtn.disabled = false;
                            placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
                        }
                    }
                };

                // Create Razorpay instance and open payment modal
                const rzp = new Razorpay(options);

                rzp.on('payment.failed', async function (response) {
                    // Payment failed
                    try {
                        await fetch('/checkout/payment-failed', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                orderId: result.orderId,
                                error: response.error
                            })
                        });

                        // Redirect to failure page instead of showing alert
                        window.location.href = `/order-failure/${result.orderId}`;
                    } catch (error) {
                        console.error('Error handling payment failure:', error);

                        // Fallback: show toast if redirect fails
                        showToast('Payment Failed', response.error.description || 'Payment was not successful', 'error');

                        // Reset button
                        const placeOrderBtn = document.querySelector('.btn-place-order');
                        placeOrderBtn.disabled = false;
                        placeOrderBtn.innerHTML = '<i class="fas fa-check-circle"></i> Place Order';
                    }
                });

                rzp.open();

            } catch (error) {
                console.error('Error creating Razorpay order:', error);
                throw error;
            }
        }
    </script>

    <%- include("../partials/footer") %>
</body>

</html>
