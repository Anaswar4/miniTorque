<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"crossorigin="anonymous">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <!-- Shared Breadcrumb CSS -->
    <link rel="stylesheet" href="/css/breadcrumb.css">
    <%- include("../partials/head") %>
    <%- include("../partials/user-sidebar") %>

     <link href="/css/user/order-details.css" rel="stylesheet"/>

    </head>
<body>
    <!-- Main Content -->
    <div class="main-content fade-in">
        <!-- Breadcrumb -->
        <div class="breadcrumb-container">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/profile">My Account</a></li>
                    <li class="breadcrumb-item"><a href="/orders">My Orders</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Order Details</li>
                </ol>
            </nav>
        </div>

        <!-- Page Header -->
        <div class="page-header fade-in">
            <h1><i class="fas fa-receipt"></i> Order Details</h1>
            <p>View and manage your order information</p>
        </div>

        <div class="order-container">
            <div class="order-main">
                <!-- Order Information -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-info-circle"></i>
                            Order Information
                        </h3>
                        <div class="order-status status-<%= order.status.toLowerCase().replace(/\s+/g, '-') %>">
                            <%= order.status %>
                        </div>
                    </div>

                    <div class="info-grid">
                        <div class="info-item">
                            <span class="info-label">Order ID</span>
                            <span class="info-value order-id-value"><%= order.orderId %></span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Order Date</span>
                            <span class="info-value">
                                <%= new Date(order.createdAt).toLocaleDateString('en-IN', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric'
                                }) %>
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Payment Method</span>
                            <span class="info-value">
                                <%= order.paymentMethod %>
                                <% if (order.paymentStatus === 'Failed') { %>
                                    <br><span class="payment-status-failed">Payment Failed</span<% } else if (order.paymentStatus === 'Pending') { %>
                                    <br><span class="payment-status-pending">Payment Pending</span>
                                <% } else if (order.paymentStatus === 'Completed') { %>
                                    <br><span style="color: #10b981; font-weight: 600; font-size: 0.75rem;">Payment Completed</span>
                                <% } %>
                            </span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Estimated Delivery</span>
                            <span class="info-value">
                                <%= new Date(order.estimatedDelivery).toLocaleDateString('en-IN', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: 'numeric'
                                }) %>
                            </span>
                        </div>
                    </div>
                </div>

                <!-- Order Timeline -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-clock"></i>
                            Order Timeline
                        </h3>
                    </div>

                    <div class="timeline">
                        <% order.orderTimeline.forEach(timeline => { %>
                            <div class="timeline-item">
                                <div class="timeline-content">
                                    <div class="timeline-status"><%= timeline.status %></div>
                                    <div class="timeline-description"><%= timeline.description %></div>
                                    <div class="timeline-date">
                                        <%= new Date(timeline.timestamp).toLocaleString('en-IN', {
                                            year: 'numeric',
                                            month: 'short',
                                            day: 'numeric',
                                            hour: '2-digit',
                                            minute: '2-digit'
                                        }) %>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>

                <!-- Order Items -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-box"></i>
                            Order Items (<%= order.orderedItems.length %>)
                        </h3>
                    </div>

                    <% order.orderedItems.forEach(item => { %>
                        <%
                            // Calculate discount information for this item
                            const regularPrice = item.product.regularPrice || item.price;
                            const salePrice = item.price;
                            const quantity = item.quantity;
                            const discountPerItem = regularPrice - salePrice;
                            const totalItemDiscount = discountPerItem * quantity;
                            const discountPercentage = regularPrice > 0 ? Math.round((discountPerItem / regularPrice) * 100) : 0;
                        %>
                        <div class="order-item">
                            <img src="/uploads/products/<%= item.product.mainImage %>"
                                 alt="<%= item.product.productName %>"
                                 class="item-image">
                            <div class="item-details">
                                <div class="item-name"><%= item.product.productName %></div>
                                <div class="item-brand">Brand: <%= item.product.brand %></div>
                                <div class="item-price">
                                    <span class="current-price">₹<%= Math.round(salePrice) %></span>
                                    <% if (discountPerItem > 0) { %>
                                        <span class="original-price" style="text-decoration: line-through; color: #6c757d; margin-left: 0.5rem;">₹<%= Math.round(regularPrice) %></span>
                                        <span class="discount-badge" style="background: #10b981; color: white; padding: 0.125rem 0.5rem; border-radius: 12px; font-size: 0.75rem; font-weight: 600; margin-left: 0.5rem;"><%= discountPercentage %>% OFF</span>
                                    <% } %>
                                </div>
                                <div class="quantity-info">
                                    Quantity: <%= quantity %> | Total: ₹<%= Math.round(item.totalPrice) %>
                                    <% if (totalItemDiscount > 0) { %>
                                        <br><small style="color: #10b981; font-weight: 600;">You saved: ₹<%= Math.round(totalItemDiscount) %> on this item</small>
                                    <% } %>
                                </div>
                                <% if (item.status === 'Active') { %>
                                    <%
                                        // Check if any item in the order has a return request
                                        const hasAnyReturnRequest = order.orderedItems.some(orderItem => orderItem.status === 'Return Request');
                                        
                                        // Check if this specific item has already been processed for return (approved, rejected, or attempted)
                                        const itemAlreadyProcessedForReturn = item.returnApprovedAt || item.returnRejectedAt || item.returnAttempted;
                                    %>
                                    <div class="item-actions">
                                        <% if ((order.status === 'Delivered' || order.status === 'Partially Returned' || hasAnyReturnRequest) && !itemAlreadyProcessedForReturn) { %>
                                            <!-- For delivered, partially returned orders, or orders with any return requests, only show return button if item hasn't been processed -->
                                            <button class="btn-return-item" onclick="openIndividualReturnModal('<%= item._id %>', '<%= item.product.productName %>')">
                                                <i class="fas fa-undo"></i> Return
                                            </button>
                                        <% } else if (!['Shipped', 'Return Request', 'Returned', 'Cancelled', 'Partially Returned'].includes(order.status) && 
                                                     !itemAlreadyProcessedForReturn &&
                                                     ((order.paymentMethod === 'Cash on Delivery') || 
                                                      (order.paymentMethod !== 'Cash on Delivery' && order.paymentStatus === 'Completed'))) { %>
                                            <!-- For non-delivered orders without any return requests, show cancel button if item hasn't been processed -->
                                            <button class="btn-cancel-item" onclick="cancelOrderItem('<%= order.orderId %>', '<%= item._id %>')">
                                                <i class="fas fa-times"></i> Cancel
                                            </button>
                                        <% } %>
                                        
                                        <% if (itemAlreadyProcessedForReturn) { %>
                                            <!-- Show status for items that have already been processed for return -->
                                            <div class="item-status-info">
                                                <% if (item.returnApprovedAt) { %>
                                                    <span class="status-badge status-completed">Return Processed</span>
                                                    <small class="text-success">Return was approved</small>
                                                <% } else if (item.returnRejectedAt) { %>
                                                    <span class="status-badge status-rejected">Return Rejected</span>
                                                    <small class="text-muted">Return was rejected - no further returns allowed</small>
                                                <% } else if (item.returnAttempted && item.status === 'Active') { %>
                                                    <span class="status-badge status-rejected">Return Not Available</span>
                                                    <small class="text-muted">Return attempt already made - only one return allowed per item</small>
                                                <% } %>
                                            </div>
                                        <% } %>
                                    </div>
                                <% } else if (item.status === 'Return Request') { %>
                                    <div class="item-status-info">
                                        <span class="status-badge status-pending">Return Requested</span>
                                        <small class="text-muted">Admin will review your request</small>
                                    </div>
                                <% } else if (item.status === 'Returned') { %>
                                    <div class="item-status-info">
                                        <span class="status-badge status-completed">Returned</span>
                                        <small class="text-success">Item has been returned</small>
                                    </div>
                                <% } %>
                            </div>
                            <div class="item-status <%= item.status.toLowerCase() %>">
                                <%= item.status %>
                            </div>
                        </div>
                    <% }); %>
                </div>

                <!-- Shipping Address -->
                <div class="order-info-card fade-in">
                    <div class="card-header">
                        <h3 class="card-title">
                            <i class="fas fa-map-marker-alt"></i>
                            Shipping Address
                        </h3>
                    </div>

                    <div class="address-details">
                        <div class="address-type" style="background: var(--text-primary); color: white; padding: 0.25rem 0.75rem; border-radius: 20px; font-size: 0.75rem; font-weight: 600; text-transform: uppercase; display: inline-block; margin-bottom: 0.75rem;">
                            <%= order.shippingAddress.addressType %>
                        </div>
                        <div style="font-weight: 600; color: var(--text-primary); margin-bottom: 0.5rem; font-size: 1rem;">
                            <%= order.shippingAddress.name %>
                        </div>
                        <div style="color: var(--text-secondary); line-height: 1.5; margin-bottom: 0.75rem; font-size: 0.875rem;">
                            <%= order.shippingAddress.landMark %>, <%= order.shippingAddress.city %><br>
                            <%= order.shippingAddress.state %> - <%= order.shippingAddress.pincode %>
                        </div>
                        <div style="color: var(--text-muted); font-size: 0.875rem; display: flex; align-items: center; gap: 0.5rem;">
                            <i class="fas fa-phone"></i> <%= order.shippingAddress.phone %>
                            <% if (order.shippingAddress.altPhone) { %>
                                | <%= order.shippingAddress.altPhone %>
                            <% } %>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Order Summary Sidebar -->
            <div class="order-summary fade-in">
                <h3 class="card-title mb-3">
                    <i class="fas fa-receipt"></i>
                    Order Summary
                </h3>

                <%
                    // Check if entire order is cancelled
                    const isEntireOrderCancelled = order.status === 'Cancelled';
                    
                    // Calculate current totals including active items and return request items
                    const activeItems = order.orderedItems.filter(item => item.status === 'Active');
                    const returnRequestItems = order.orderedItems.filter(item => item.status === 'Return Request');
                    const cancelledItems = order.orderedItems.filter(item => item.status === 'Cancelled');
                    
                    // Items that should be included in total calculation (Active + Return Request)
                    const includedItems = [...activeItems, ...returnRequestItems];
                    
                    // If entire order is cancelled, set all values to 0
                    let currentSubtotal = 0; // Based on regular prices
                    let amountAfterDiscount = 0; // Amount customer actually pays (sale prices)
                    let totalDiscount = 0; // Total discount for included items
                    let currentTotal = 0; // Final total
                    
                    if (!isEntireOrderCancelled) {
                        includedItems.forEach(item => {
                            // Get regular price from product (assuming it's stored in the product)
                            const regularPrice = item.product.regularPrice || item.price; // Fallback to item.price if regularPrice not available
                            const salePrice = item.price; // This is the sale price stored in the order
                            const quantity = item.quantity;
                            
                            // Subtotal based on regular prices
                            currentSubtotal += regularPrice * quantity;
                            
                            // Amount customer actually pays (sale price total)
                            amountAfterDiscount += item.totalPrice;
                            
                            // Calculate discount for this item
                            const itemDiscount = (regularPrice - salePrice) * quantity;
                            totalDiscount += Math.max(0, itemDiscount);
                        });
                        
                        // Final total calculation
                        currentTotal = amountAfterDiscount;
                        if (currentSubtotal > 0) {
                            currentTotal += order.shippingCharges;
                        }
                        
                        // Subtract coupon discount if applied
                        if (order.couponApplied && order.couponDiscount > 0) {
                            currentTotal -= order.couponDiscount;
                        }
                    }
                    
                    // Calculate cancelled amounts
                    let cancelledSubtotal = 0; // Based on regular prices
                    let cancelledAmountAfterDiscount = 0; // Amount that was going to be paid
                    let cancelledDiscount = 0; // Discount on cancelled items
                    
                    cancelledItems.forEach(item => {
                        const regularPrice = item.product.regularPrice || item.price;
                        const salePrice = item.price;
                        const quantity = item.quantity;
                        
                        cancelledSubtotal += regularPrice * quantity;
                        cancelledAmountAfterDiscount += item.totalPrice;
                        
                        const itemDiscount = (regularPrice - salePrice) * quantity;
                        cancelledDiscount += Math.max(0, itemDiscount);
                    });
                    
                    // Additional variables for cancel button logic
                    const canCancelOrder = !['Shipped', 'Delivered', 'Return Request', 'Returned', 'Cancelled'].includes(order.status);
                    const hasActiveItems = activeItems.length > 0;
                    
                    // For online payments, only allow cancellation after payment is completed
                    // For COD, allow cancellation anytime before shipping
                    const canCancelBasedOnPayment = (order.paymentMethod === 'Cash on Delivery') || 
                                                   (order.paymentMethod !== 'Cash on Delivery' && order.paymentStatus === 'Completed');
                %>

                <div class="summary-row">
                    <span class="summary-label">
                        <% if (cancelledItems.length > 0) { %>
                            <% if (returnRequestItems.length > 0) { %>
                                Subtotal (Active + Return Requested)
                            <% } else { %>
                                Subtotal (Active Items)
                            <% } %>
                        <% } else { %>
                            Subtotal
                        <% } %>
                    </span>
                    <span class="summary-value">₹<%= Math.round(currentSubtotal) %></span>
                </div>

                <% if (cancelledSubtotal > 0) { %>
                <div class="summary-row" style="color: #ef4444;">
                    <span class="summary-label">Cancelled Items (Regular Price)</span>
                    <span class="summary-value">-₹<%= Math.round(cancelledSubtotal) %></span>
                </div>
                <% } %>

                <% if (totalDiscount > 0) { %>
                <div class="summary-row">
                    <span class="summary-label">
                        <% if (cancelledItems.length > 0) { %>
                            <% if (returnRequestItems.length > 0) { %>
                                Discount (Active + Return Requested)
                            <% } else { %>
                                Discount (Active Items)
                            <% } %>
                        <% } else { %>
                            Discount
                        <% } %>
                    </span>
                    <span class="summary-value" style="color: var(--success-color);">-₹<%= Math.round(totalDiscount) %></span>
                </div>
                <% } %>

                <% if (cancelledDiscount > 0) { %>
                <div class="summary-row" style="color: #6c757d;">
                    <span class="summary-label">Discount on Cancelled Items</span>
                    <span class="summary-value">+₹<%= Math.round(cancelledDiscount) %></span>
                </div>
                <% } %>

                <div class="summary-row">
                    <span class="summary-label">Shipping</span>
                    <span class="summary-value">
                        <% if (isEntireOrderCancelled) { %>
                            ₹0.00
                        <% } else if (currentSubtotal > 0) { %>
                            <% if (order.shippingCharges === 0) { %>
                                <span style="color: var(--success-color);">FREE</span>
                            <% } else { %>
                                ₹<%= Math.round(order.shippingCharges) %>
                            <% } %>
                        <% } else { %>
                            ₹0.00
                        <% } %>
                    </span>
                </div>

                <% if (order.couponApplied && order.couponDiscount > 0) { %>
                <div class="summary-row">
                    <span class="summary-label">Coupon Discount</span>
                    <span class="summary-value" style="color: var(--success-color);">
                        <% if (isEntireOrderCancelled) { %>
                            -₹0.00
                        <% } else { %>
                            -₹<%= Math.round(order.couponDiscount) %>
                        <% } %>
                    </span>
                </div>
                <% } %>

                <div class="summary-row">
                    <span class="summary-label">
                        <% if (cancelledItems.length > 0) { %>
                            Current Total
                        <% } else { %>
                            Total
                        <% } %>
                    </span>
                    <span class="summary-value">₹<%= Math.round(currentTotal) %></span>
                </div>

                <% if (isEntireOrderCancelled) { %>
                <div style="margin-top: 1rem; padding: 0.75rem; background: #fef2f2; border: 1px solid #fecaca; border-radius: 8px; font-size: 0.875rem; color: #991b1b;">
                    <i class="fas fa-times-circle" style="color: #dc2626; margin-right: 0.5rem;"></i>
                    <strong>Order Cancelled:</strong> This entire order has been cancelled. All amounts have been set to zero and any applicable refunds have been processed.
                </div>
                <% } else if (returnRequestItems.length > 0) { %>
                <div style="margin-top: 1rem; padding: 0.75rem; background: #f0f9ff; border: 1px solid #bae6fd; border-radius: 8px; font-size: 0.875rem; color: #0c4a6e;">
                    <i class="fas fa-info-circle" style="color: #0369a1; margin-right: 0.5rem;"></i>
                    <strong>Note:</strong> Items with return requests are still included in the total until the admin processes the return.
                </div>
                <% } %>

                <% if (order.paymentStatus === 'Failed') { %>
                <div style="margin-top: 1rem; padding: 0.75rem; background: #fef2f2; border: 1px solid #fecaca; border-radius: 8px; font-size: 0.875rem; color: #991b1b;">
                    <i class="fas fa-exclamation-triangle" style="color: #ef4444; margin-right: 0.5rem;"></i>
                    <strong>Payment Failed:</strong> Your order has been created but payment was not successful. Please retry payment to complete your order and access your invoice.
                </div>
                <% } %>

                <!-- Download Invoice Button / Retry Payment Button -->
                <% if (order.paymentStatus === 'Failed') { %>
                    <a href="/checkout/retry-payment/<%= order.orderId %>" class="btn-retry-payment">
                        <i class="fas fa-redo"></i>
                        Retry Payment
                    </a>
                <% } else if (
                    order.status !== 'Cancelled' &&
                    (
                        (order.paymentMethod === 'Cash on Delivery') ||
                        (order.paymentMethod !== 'Cash on Delivery' && order.paymentStatus === 'Completed')
                    )
                ) { %>
                    <button class="btn-download-invoice" onclick="downloadInvoice('<%= order.orderId %>')">
                        <i class="fas fa-download"></i>
                        Download Invoice
                    </button>
                <% } %>

                <!-- Cancel Order Button / Return Button -->
                <%
                    // Check if any item in the order has a return request for order summary button logic
                    const hasAnyReturnRequestForSummary = order.orderedItems.some(orderItem => orderItem.status === 'Return Request');
                    // Check if there are any items that can still be returned (Active and not attempted)
                    const hasReturnableItems = order.orderedItems.some(orderItem => orderItem.status === 'Active' && !orderItem.returnAttempted);
                %>
                <% if ((order.status === 'Delivered' || order.status === 'Partially Returned' || hasAnyReturnRequestForSummary) && hasReturnableItems) { %>
                    <button class="btn-return-order" onclick="openReturnModal()">
                        <i class="fas fa-undo"></i>
                        Return Order
                    </button>
                <% } else if (canCancelOrder && hasActiveItems && canCancelBasedOnPayment) { %>
                    <button class="btn-cancel-order" onclick="openCancelOrderModal()">
                        <i class="fas fa-times"></i>
                        <% if (order.status === 'Partially Cancelled') { %>
                            Cancel Remaining Items
                        <% } else { %>
                            Cancel Order
                        <% } %>
                    </button>
                <% } else if (canCancelOrder && hasActiveItems && !canCancelBasedOnPayment) { %>
                    <div class="payment-pending-notice">
                        <i class="fas fa-info-circle"></i>
                        <span>Cancellation will be available after payment confirmation</span>
                    </div>
                <% } else if (!hasActiveItems && order.status === 'Partially Cancelled') { %>
                    <div style="margin-top: 1rem; padding: 0.75rem; background: #f8f9fa; border-radius: 8px; text-align: center; color: #6c757d; font-size: 0.875rem;">
                        <i class="fas fa-info-circle"></i>
                        All items have been cancelled
                    </div>
                <% } else { %>
                    <div style="margin-top: 1rem; padding: 0.75rem; background: #f8f9fa; border-radius: 8px; text-align: center; color: #6c757d; font-size: 0.875rem;">
                        <i class="fas fa-info-circle"></i>
                        Order cannot be cancelled at this stage
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Standard Modal Overlay -->
    <div class="modal-overlay" id="modalOverlay"></div>

    <!-- Cancel Item Modal -->
    <div id="cancelItemModal" class="standard-modal">
        <div class="modal-container">
            <div class="modal-header">
                <div class="modal-title">
                    <i class="fas fa-times-circle text-danger"></i>
                    <span>Cancel Product</span>
                </div>
                <button class="modal-close-btn" onclick="closeCancelModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="modal-body">
                <div class="form-group">
                    <label for="cancelReason" class="form-label">
                        <span class="required">*</span> Cancellation Reason
                    </label>
                    <select id="cancelReason" class="form-control" onchange="handleReasonChange()">
                        <option value="">Select a reason for cancellation</option>
                        <option value="Ordered by mistake">Ordered by mistake</option>
                        <option value="Found cheaper elsewhere">Found cheaper elsewhere</option>
                        <option value="Changed my mind">Changed my mind</option>
                        <option value="Product no longer needed">Product no longer needed</option>
                        <option value="Delivery taking too long">Delivery taking too long</option>
                        <option value="Financial constraints">Financial constraints</option>
                        <option value="Quality concerns">Quality concerns</option>
                        <option value="Other">Other</option>
                    </select>
                    <div id="reasonError" class="error-message">Please select a cancellation reason</div>
                </div>
                
                <div id="customReasonGroup" class="form-group custom-reason-group">
                    <label for="customReason" class="form-label">
                        <span class="required">*</span> Please specify your reason
                    </label>
                    <textarea id="customReason" class="form-control" placeholder="Please provide your specific reason for cancellation..." rows="3"></textarea>
                    <div id="customReasonError" class="error-message">Please provide a custom reason</div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeCancelModal()">
                    <i class="fas fa-times"></i>
                    Cancel
                </button>
                <button id="confirmCancelBtn" class="btn btn-danger" onclick="confirmCancellation()" disabled>
                    <i class="fas fa-check"></i>
                    Confirm Cancellation
                </button>
            </div>
        </div>
    </div>

    <!-- Cancel Order Modal -->
    <div id="cancelOrderModal" class="standard-modal">
        <div class="modal-container">
            <div class="modal-header">
                <div class="modal-title">
                    <i class="fas fa-exclamation-triangle text-warning"></i>
                    <span>
                        <% if (order.status === 'Partially Cancelled') { %>
                            Cancel Remaining Items
                        <% } else { %>
                            Cancel Entire Order
                        <% } %>
                    </span>
                </div>
                <button class="modal-close-btn" onclick="closeCancelOrderModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="modal-body">
                <div class="form-group">
                    <label for="cancelOrderReason" class="form-label">
                        <span class="required">*</span> Cancellation Reason
                    </label>
                    <select id="cancelOrderReason" class="form-control" onchange="handleOrderReasonChange()">
                        <option value="">
                            <% if (order.status === 'Partially Cancelled') { %>
                                Select a reason for cancelling remaining items
                            <% } else { %>
                                Select a reason for cancelling this order
                            <% } %>
                        </option>
                        <option value="Ordered by mistake">Ordered by mistake</option>
                        <option value="Found cheaper elsewhere">Found cheaper elsewhere</option>
                        <option value="Changed my mind">Changed my mind</option>
                        <option value="Products no longer needed">Products no longer needed</option>
                        <option value="Delivery taking too long">Delivery taking too long</option>
                        <option value="Financial constraints">Financial constraints</option>
                        <option value="Quality concerns">Quality concerns</option>
                        <option value="Duplicate order">Duplicate order</option>
                        <option value="Other">Other</option>
                    </select>
                    <div id="orderReasonError" class="error-message">Please select a cancellation reason</div>
                </div>
                
                <div id="customOrderReasonGroup" class="form-group custom-reason-group">
                    <label for="customOrderReason" class="form-label">
                        <span class="required">*</span> Please specify your reason
                    </label>
                    <textarea id="customOrderReason" class="form-control" placeholder="<% if (order.status === 'Partially Cancelled') { %>Please provide your specific reason for cancelling remaining items...<% } else { %>Please provide your specific reason for cancelling this entire order...<% } %>" rows="4"></textarea>
                    <div id="customOrderReasonError" class="error-message">Please provide a custom reason</div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeCancelOrderModal()">
                    <i class="fas fa-arrow-left"></i>
                    <% if (order.status === 'Partially Cancelled') { %>
                        Keep Items
                    <% } else { %>
                        Keep Order
                    <% } %>
                </button>
                <button id="confirmOrderCancelBtn" class="btn btn-danger" onclick="confirmOrderCancellation()" disabled>
                    <i class="fas fa-times-circle"></i>
                    <% if (order.status === 'Partially Cancelled') { %>
                        Cancel Remaining Items
                    <% } else { %>
                        Cancel Order
                    <% } %>
                </button>
            </div>
        </div>
    </div>

    <!-- Return Order Modal -->
    <div id="returnOrderModal" class="standard-modal large-modal">
        <div class="modal-container">
            <div class="modal-header">
                <div class="modal-title">
                    <i class="fas fa-undo text-primary"></i>
                    <span>Return Order Items</span>
                </div>
                <button class="modal-close-btn" onclick="closeReturnModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="modal-body">
                <!-- Return Instructions -->
                <div class="info-box">
                    <div class="info-box-header">
                        <i class="fas fa-info-circle"></i>
                        <span>Return Policy</span>
                    </div>
                    <p>Select the items you want to return and provide a reason for each. Returns are processed within 7-14 business days. Items must be in original condition with all tags and packaging.</p>
                </div>

                <!-- Return Products Section -->
                <div class="return-products-section">
                    <h4 class="section-title">
                        <i class="fas fa-box-open"></i>
                        Select Items to Return
                    </h4>

                    <% 
                    const returnableItems = order.orderedItems.filter(item => item.status === 'Active' && !item.returnAttempted);
                    returnableItems.forEach((item, index) => { 
                    %>
                        <div class="return-product-item" data-item-id="<%= item._id %>">
                            <div class="product-item-header">
                                <div class="product-checkbox">
                                    <input type="checkbox" 
                                           id="return-item-<%= index %>" 
                                           onchange="toggleReturnItem('<%= item._id %>', this.checked)">
                                    <label for="return-item-<%= index %>"></label>
                                </div>
                                <img src="/uploads/products/<%= item.product.mainImage %>"
                                     alt="<%= item.product.productName %>"
                                     class="product-image">
                                <div class="product-details">
                                    <div class="product-name"><%= item.product.productName %></div>
                                    <div class="product-brand">Brand: <%= item.product.brand %></div>
                                    <div class="product-price">₹<%= Math.round(item.price) %></div>
                                    <div class="product-quantity">Quantity: <%= item.quantity %> | Total: ₹<%= Math.round(item.totalPrice) %></div>
                                </div>
                            </div>

                            <!-- Return Reason Section -->
                            <div class="return-reason-section" id="return-reason-<%= item._id %>">
                                <div class="form-group">
                                    <label for="return-reason-select-<%= item._id %>" class="form-label">
                                        <span class="required">*</span> Return Reason
                                    </label>
                                    <select id="return-reason-select-<%= item._id %>" 
                                            class="form-control" 
                                            onchange="handleReturnReasonChange('<%= item._id %>', this.value)">
                                        <option value="">Select a reason for return</option>
                                        <option value="Defective/Damaged product">Defective/Damaged product</option>
                                        <option value="Wrong item received">Wrong item received</option>
                                        <option value="Size/fit issues">Size/fit issues</option>
                                        <option value="Quality not as expected">Quality not as expected</option>
                                        <option value="Product not as described">Product not as described</option>
                                        <option value="Changed my mind">Changed my mind</option>
                                        <option value="Found better price elsewhere">Found better price elsewhere</option>
                                        <option value="Ordered by mistake">Ordered by mistake</option>
                                        <option value="Delivery delay">Delivery delay</option>
                                        <option value="Other">Other</option>
                                    </select>
                                    
                                    <textarea id="return-custom-reason-<%= item._id %>" 
                                              class="form-control custom-reason-textarea" 
                                              placeholder="Please provide specific details about your return reason..."
                                              oninput="validateReturnReason('<%= item._id %>')"></textarea>
                                    
                                    <div id="return-error-<%= item._id %>" class="error-message">
                                        Please select a return reason
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
            
            <div class="modal-footer">
                <div class="selected-info">
                    <span id="return-selected-text">No items selected</span>
                </div>
                <div class="modal-actions">
                    <button class="btn btn-secondary" onclick="closeReturnModal()">
                        <i class="fas fa-times"></i>
                        Cancel
                    </button>
                    <button id="submitReturnBtn" class="btn btn-primary" onclick="submitReturnRequest()" disabled>
                        <i class="fas fa-paper-plane"></i>
                        Submit Return Request
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Individual Item Return Modal -->
    <div id="individualReturnModal" class="standard-modal">
        <div class="modal-container">
            <div class="modal-header">
                <div class="modal-title">
                    <i class="fas fa-undo text-primary"></i>
                    <span>Return Product</span>
                </div>
                <button class="modal-close-btn" onclick="closeIndividualReturnModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="modal-body">
                <div class="return-item-info">
                    <h5 id="individualReturnItemName" class="item-name">Product Name</h5>
                    <div class="info-box">
                        <div class="info-box-header">
                            <i class="fas fa-info-circle"></i>
                            <span>Return Policy</span>
                        </div>
                        <p>Returns are processed within 7-14 business days. Items must be in original condition with all tags and packaging.</p>
                    </div>
                </div>

                <div class="form-group">
                    <label for="individualReturnReason" class="form-label">
                        <span class="required">*</span> Return Reason
                    </label>
                    <select id="individualReturnReason" class="form-control">
                        <option value="">Select a reason for return</option>
                        <option value="Defective/Damaged product">Defective/Damaged product</option>
                        <option value="Wrong item received">Wrong item received</option>
                        <option value="Size/fit issues">Size/fit issues</option>
                        <option value="Quality not as expected">Quality not as expected</option>
                        <option value="Product not as described">Product not as described</option>
                        <option value="Changed my mind">Changed my mind</option>
                        <option value="Found better price elsewhere">Found better price elsewhere</option>
                        <option value="Ordered by mistake">Ordered by mistake</option>
                        <option value="Delivery delay">Delivery delay</option>
                        <option value="Other">Other</option>
                    </select>
                    <div id="individualReturnReasonError" class="error-message">Please select a return reason</div>
                </div>
                
                <div id="individualCustomReasonGroup" class="form-group custom-reason-group">
                    <label for="individualCustomReason" class="form-label">
                        <span class="required">*</span> Please specify your reason
                    </label>
                    <textarea id="individualCustomReason" class="form-control" placeholder="Please provide specific details about your return reason..." rows="3"></textarea>
                    <div id="individualCustomReasonError" class="error-message">Please provide a custom reason</div>
                </div>
            </div>
            
            <div class="modal-footer">
                <button class="btn btn-secondary" onclick="closeIndividualReturnModal()">
                    <i class="fas fa-times"></i>
                    Cancel
                </button>
                <button id="submitIndividualReturnBtn" class="btn btn-primary" onclick="submitIndividualReturnRequest()" disabled>
                    <i class="fas fa-paper-plane"></i>
                    Submit Return Request
                </button>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables for modal
        let currentOrderId = null;
        let currentItemId = null;

        // Modal utility functions
        function showModal(modalId) {
            document.getElementById('modalOverlay').classList.add('active');
            document.getElementById(modalId).classList.add('active');
            document.body.style.overflow = 'hidden';
        }

        function hideModal(modalId) {
            document.getElementById('modalOverlay').classList.remove('active');
            document.getElementById(modalId).classList.remove('active');
            document.body.style.overflow = 'auto';
        }

        // Open cancel modal
        function cancelOrderItem(orderId, itemId) {
            currentOrderId = orderId;
            currentItemId = itemId;
            
            // Reset form
            document.getElementById('cancelReason').value = '';
            document.getElementById('customReason').value = '';
            document.getElementById('customReasonGroup').classList.remove('show');
            document.getElementById('confirmCancelBtn').disabled = true;
            hideErrors();
            
            // Show modal
            showModal('cancelItemModal');
        }

        // Close cancel modal
        function closeCancelModal() {
            hideModal('cancelItemModal');
            currentOrderId = null;
            currentItemId = null;
        }

        // Handle reason dropdown change
        function handleReasonChange() {
            const reasonSelect = document.getElementById('cancelReason');
            const customReasonGroup = document.getElementById('customReasonGroup');
            const confirmBtn = document.getElementById('confirmCancelBtn');
            
            hideErrors();
            
            if (reasonSelect.value === 'Other') {
                customReasonGroup.classList.add('show');
                confirmBtn.disabled = true;
            } else if (reasonSelect.value) {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = false;
            } else {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = true;
            }
        }

        // Handle custom reason input
        document.getElementById('customReason').addEventListener('input', function() {
            const confirmBtn = document.getElementById('confirmCancelBtn');
            const customReason = this.value.trim();
            
            hideErrors();
            
            if (customReason) {
                confirmBtn.disabled = false;
            } else {
                confirmBtn.disabled = true;
            }
        });

        // Hide error messages
        function hideErrors() {
            document.getElementById('reasonError').classList.remove('show');
            document.getElementById('customReasonError').classList.remove('show');
        }

        // Show error message
        function showError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (message) {
                errorElement.textContent = message;
            }
            errorElement.classList.add('show');
        }

        // Validate form
        function validateForm() {
            const reasonSelect = document.getElementById('cancelReason');
            const customReason = document.getElementById('customReason');
            
            hideErrors();
            
            if (!reasonSelect.value) {
                showError('reasonError');
                return false;
            }
            
            if (reasonSelect.value === 'Other' && !customReason.value.trim()) {
                showError('customReasonError');
                return false;
            }
            
            return true;
        }

        // Confirm cancellation
        async function confirmCancellation() {
            if (!validateForm()) {
                return;
            }
            
            const reasonSelect = document.getElementById('cancelReason');
            const customReason = document.getElementById('customReason');
            
            let reason = reasonSelect.value;
            if (reason === 'Other') {
                reason = customReason.value.trim();
            }
            
            try {
                const response = await fetch(`/orders/${currentOrderId}/items/${currentItemId}/cancel`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason: reason })
                });

                const result = await response.json();

                if (result.success) {
                    closeCancelModal();
                    
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });

                    Toast.fire({
                        icon: 'success',
                        title: 'Product cancelled successfully'
                    });

                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    closeCancelModal();
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 4000,
                        timerProgressBar: true
                    });
                    Toast.fire({
                        icon: 'error',
                        title: result.message || 'Failed to cancel product'
                    });
                }
            } catch (error) {
                console.error('Error cancelling product:', error);
                closeCancelModal();
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'bottom-right',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true
                });
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to cancel product. Please try again.'
                });
            }
        }

        // Close modal when clicking outside or on overlay
        document.getElementById('modalOverlay').addEventListener('click', function() {
            // Check which modal is currently active and close it
            if (document.getElementById('cancelItemModal').classList.contains('active')) {
                closeCancelModal();
            } else if (document.getElementById('cancelOrderModal').classList.contains('active')) {
                closeCancelOrderModal();
            } else if (document.getElementById('returnOrderModal').classList.contains('active')) {
                closeReturnModal();
            } else if (document.getElementById('individualReturnModal').classList.contains('active')) {
                closeIndividualReturnModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                if (document.getElementById('cancelItemModal').classList.contains('active')) {
                    closeCancelModal();
                } else if (document.getElementById('cancelOrderModal').classList.contains('active')) {
                    closeCancelOrderModal();
                } else if (document.getElementById('returnOrderModal').classList.contains('active')) {
                    closeReturnModal();
                } else if (document.getElementById('individualReturnModal').classList.contains('active')) {
                    closeIndividualReturnModal();
                }
            }
        });

        // Order Cancellation Modal Functions
        function openCancelOrderModal() {
            // Reset form
            document.getElementById('cancelOrderReason').value = '';
            document.getElementById('customOrderReason').value = '';
            document.getElementById('customOrderReasonGroup').classList.remove('show');
            document.getElementById('confirmOrderCancelBtn').disabled = true;
            hideOrderErrors();
            
            // Show modal
            showModal('cancelOrderModal');
        }

        function closeCancelOrderModal() {
            hideModal('cancelOrderModal');
        }

        function handleOrderReasonChange() {
            const reasonSelect = document.getElementById('cancelOrderReason');
            const customReasonGroup = document.getElementById('customOrderReasonGroup');
            const confirmBtn = document.getElementById('confirmOrderCancelBtn');
            
            hideOrderErrors();
            
            if (reasonSelect.value === 'Other') {
                customReasonGroup.classList.add('show');
                confirmBtn.disabled = true;
            } else if (reasonSelect.value) {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = false;
            } else {
                customReasonGroup.classList.remove('show');
                confirmBtn.disabled = true;
            }
        }

        // Handle custom reason input for order cancellation
        document.getElementById('customOrderReason').addEventListener('input', function() {
            const confirmBtn = document.getElementById('confirmOrderCancelBtn');
            const customReason = this.value.trim();
            
            hideOrderErrors();
            
            if (customReason) {
                confirmBtn.disabled = false;
            } else {
                confirmBtn.disabled = true;
            }
        });

        function hideOrderErrors() {
            document.getElementById('orderReasonError').classList.remove('show');
            document.getElementById('customOrderReasonError').classList.remove('show');
        }

        function showOrderError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (message) {
                errorElement.textContent = message;
            }
            errorElement.classList.add('show');
        }

        function validateOrderForm() {
            const reasonSelect = document.getElementById('cancelOrderReason');
            const customReason = document.getElementById('customOrderReason');
            
            hideOrderErrors();
            
            if (!reasonSelect.value) {
                showOrderError('orderReasonError');
                return false;
            }
            
            if (reasonSelect.value === 'Other' && !customReason.value.trim()) {
                showOrderError('customOrderReasonError');
                return false;
            }
            
            return true;
        }

        async function confirmOrderCancellation() {
            if (!validateOrderForm()) {
                return;
            }
            
            const reasonSelect = document.getElementById('cancelOrderReason');
            const customReason = document.getElementById('customOrderReason');
            
            let reason = reasonSelect.value;
            if (reason === 'Other') {
                reason = customReason.value.trim();
            }
            
            try {
                const orderId = '<%= order.orderId %>';
                const response = await fetch(`/orders/${orderId}/cancel-entire`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ reason: reason })
                });

                const result = await response.json();

                if (result.success) {
                    closeCancelOrderModal();
                    
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });

                    Toast.fire({
                        icon: 'success',
                        title: 'Order cancelled successfully'
                    });

                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    closeCancelOrderModal();
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 4000,
                        timerProgressBar: true
                    });
                    Toast.fire({
                        icon: 'error',
                        title: result.message || 'Failed to cancel order'
                    });
                }
            } catch (error) {
                console.error('Error cancelling order:', error);
                closeCancelOrderModal();
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'bottom-right',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true
                });
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to cancel order. Please try again.'
                });
            }
        }

        
        // Return Order Modal Functions
        let selectedReturnItems = new Set();
        let returnReasons = new Map();

        function openReturnModal() {
            // Reset modal state
            selectedReturnItems.clear();
            returnReasons.clear();
            
            // Reset all checkboxes and forms
            document.querySelectorAll('.return-product-item input[type="checkbox"]').forEach(checkbox => {
                checkbox.checked = false;
            });
            
            document.querySelectorAll('.return-product-item').forEach(item => {
                item.classList.remove('selected');
            });
            
            document.querySelectorAll('.return-reason-section').forEach(section => {
                section.classList.remove('show');
            });
            
            // Reset all form fields
            document.querySelectorAll('.return-reason-section select').forEach(select => {
                select.value = '';
            });
            
            document.querySelectorAll('.custom-reason-textarea').forEach(textarea => {
                textarea.value = '';
                textarea.classList.remove('show');
            });
            
            // Hide all error messages
            document.querySelectorAll('.error-message').forEach(error => {
                error.classList.remove('show');
            });
            
            // Reset footer
            updateReturnSelectedInfo();
            document.getElementById('submitReturnBtn').disabled = true;
            
            // Show modal
            showModal('returnOrderModal');
        }

        function closeReturnModal() {
            hideModal('returnOrderModal');
        }

        function toggleReturnItem(itemId, isChecked) {
            const productItem = document.querySelector(`[data-item-id="${itemId}"]`);
            const reasonSection = document.getElementById(`return-reason-${itemId}`);
            
            if (isChecked) {
                selectedReturnItems.add(itemId);
                productItem.classList.add('selected');
                reasonSection.classList.add('show');
            } else {
                selectedReturnItems.delete(itemId);
                returnReasons.delete(itemId);
                productItem.classList.remove('selected');
                reasonSection.classList.remove('show');
                
                // Reset form fields for this item
                const reasonSelect = document.getElementById(`return-reason-select-${itemId}`);
                const customReason = document.getElementById(`return-custom-reason-${itemId}`);
                const errorMsg = document.getElementById(`return-error-${itemId}`);
                
                reasonSelect.value = '';
                customReason.value = '';
                customReason.classList.remove('show');
                errorMsg.classList.remove('show');
            }
            
            updateReturnSelectedInfo();
            validateReturnForm();
        }

        function handleReturnReasonChange(itemId, selectedReason) {
            const customReasonTextarea = document.getElementById(`return-custom-reason-${itemId}`);
            const errorMsg = document.getElementById(`return-error-${itemId}`);
            
            // Hide error message when user selects a reason
            errorMsg.classList.remove('show');
            
            if (selectedReason === 'Other') {
                customReasonTextarea.classList.add('show');
                customReasonTextarea.focus();
                // Don't set the reason yet, wait for custom input
                returnReasons.delete(itemId);
            } else if (selectedReason) {
                customReasonTextarea.classList.remove('show');
                customReasonTextarea.value = '';
                returnReasons.set(itemId, selectedReason);
            } else {
                customReasonTextarea.classList.remove('show');
                customReasonTextarea.value = '';
                returnReasons.delete(itemId);
            }
            
            validateReturnForm();
        }

        function validateReturnReason(itemId) {
            const customReasonTextarea = document.getElementById(`return-custom-reason-${itemId}`);
            const customReason = customReasonTextarea.value.trim();
            const errorMsg = document.getElementById(`return-error-${itemId}`);
            
            // Hide error message when user types
            errorMsg.classList.remove('show');
            
            if (customReason) {
                returnReasons.set(itemId, customReason);
            } else {
                returnReasons.delete(itemId);
            }
            
            validateReturnForm();
        }

        function updateReturnSelectedInfo() {
            const selectedCount = selectedReturnItems.size;
            const selectedText = document.getElementById('return-selected-text');
            
            if (selectedCount === 0) {
                selectedText.textContent = 'No items selected';
            } else if (selectedCount === 1) {
                selectedText.innerHTML = '<span class="return-selected-count">1</span> item selected for return';
            } else {
                selectedText.innerHTML = `<span class="return-selected-count">${selectedCount}</span> items selected for return`;
            }
        }

        function validateReturnForm() {
            const submitBtn = document.getElementById('submitReturnBtn');
            let isValid = true;
            
            // Check if any items are selected
            if (selectedReturnItems.size === 0) {
                isValid = false;
            } else {
                // Check if all selected items have reasons
                for (const itemId of selectedReturnItems) {
                    if (!returnReasons.has(itemId)) {
                        isValid = false;
                        break;
                    }
                }
            }
            
            submitBtn.disabled = !isValid;
        }

        function validateAllReturnReasons() {
            let allValid = true;
            
            for (const itemId of selectedReturnItems) {
                const reasonSelect = document.getElementById(`return-reason-select-${itemId}`);
                const customReason = document.getElementById(`return-custom-reason-${itemId}`);
                const errorMsg = document.getElementById(`return-error-${itemId}`);
                
                if (!reasonSelect.value) {
                    errorMsg.textContent = 'Please select a return reason';
                    errorMsg.classList.add('show');
                    allValid = false;
                } else if (reasonSelect.value === 'Other' && !customReason.value.trim()) {
                    errorMsg.textContent = 'Please provide a custom reason';
                    errorMsg.classList.add('show');
                    allValid = false;
                } else {
                    errorMsg.classList.remove('show');
                }
            }
            
            return allValid;
        }

        async function submitReturnRequest() {
            // Validate all reasons before submitting
            if (!validateAllReturnReasons()) {
                return;
            }
            
            // Prepare return request data with selected items and their reasons
            const returnItems = [];
            for (const itemId of selectedReturnItems) {
                const reason = returnReasons.get(itemId);
                if (reason) {
                    returnItems.push({
                        itemId: itemId,
                        reason: reason
                    });
                }
            }
            
            try {
                // Show loading state
                const submitBtn = document.getElementById('submitReturnBtn');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                submitBtn.disabled = true;
                
                // Make API call to return request endpoint
                const response = await fetch('/orders/<%= order.orderId %>/request-return', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        items: returnItems,
                        requestType: 'bulk' // Indicates this is a bulk return request
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    closeReturnModal();
                    
                    // Show success message
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 4000,
                        timerProgressBar: true
                    });
                    Toast.fire({
                        icon: 'success',
                        title: result.message || 'Return request submitted successfully'
                    });
                    
                    // Reload the page to show updated status
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    // Reset button state
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;
                    
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 4000,
                        timerProgressBar: true
                    });
                    Toast.fire({
                        icon: 'error',
                        title: result.message || 'Failed to submit return request'
                    });
                }
                
            } catch (error) {
                console.error('Error submitting return request:', error);
                
                // Reset button state
                const submitBtn = document.getElementById('submitReturnBtn');
                submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Return Request';
                submitBtn.disabled = false;
                
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'bottom-right',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true
                });
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to submit return request. Please try again.'
                });
            }
        }

        
        // Individual Return Modal Functions
        let currentIndividualItemId = null;
        let currentIndividualItemName = null;

        function openIndividualReturnModal(itemId, itemName) {
            currentIndividualItemId = itemId;
            currentIndividualItemName = itemName;
            
            // Set item name in modal
            const itemNameElement = document.getElementById('individualReturnItemName');
            if (itemNameElement) {
                itemNameElement.textContent = itemName;
            }
            
            // Reset form
            const reasonSelect = document.getElementById('individualReturnReason');
            const customReason = document.getElementById('individualCustomReason');
            const customReasonGroup = document.getElementById('individualCustomReasonGroup');
            const submitBtn = document.getElementById('submitIndividualReturnBtn');
            
            if (reasonSelect) reasonSelect.value = '';
            if (customReason) customReason.value = '';
            if (customReasonGroup) customReasonGroup.classList.remove('show');
            if (submitBtn) submitBtn.disabled = true;
            
            hideIndividualReturnErrors();
            
            // Show modal
            showModal('individualReturnModal');
        }

        function closeIndividualReturnModal() {
            hideModal('individualReturnModal');
            currentIndividualItemId = null;
            currentIndividualItemName = null;
        }

        function handleIndividualReturnReasonChange() {
            const reasonSelect = document.getElementById('individualReturnReason');
            const customReasonGroup = document.getElementById('individualCustomReasonGroup');
            const submitBtn = document.getElementById('submitIndividualReturnBtn');
            
            hideIndividualReturnErrors();
            
            if (reasonSelect.value === 'Other') {
                customReasonGroup.classList.add('show');
                submitBtn.disabled = true;
            } else if (reasonSelect.value) {
                customReasonGroup.classList.remove('show');
                submitBtn.disabled = false;
            } else {
                customReasonGroup.classList.remove('show');
                submitBtn.disabled = true;
            }
        }

        // Handle custom reason input for individual return
        document.getElementById('individualCustomReason').addEventListener('input', function() {
            const submitBtn = document.getElementById('submitIndividualReturnBtn');
            const customReason = this.value.trim();
            
            hideIndividualReturnErrors();
            
            if (customReason) {
                submitBtn.disabled = false;
            } else {
                submitBtn.disabled = true;
            }
        });

        // Handle reason dropdown change for individual return
        document.getElementById('individualReturnReason').addEventListener('change', handleIndividualReturnReasonChange);

        function hideIndividualReturnErrors() {
            document.getElementById('individualReturnReasonError').classList.remove('show');
            document.getElementById('individualCustomReasonError').classList.remove('show');
        }

        function showIndividualReturnError(elementId, message) {
            const errorElement = document.getElementById(elementId);
            if (message) {
                errorElement.textContent = message;
            }
            errorElement.classList.add('show');
        }

        function validateIndividualReturnForm() {
            const reasonSelect = document.getElementById('individualReturnReason');
            const customReason = document.getElementById('individualCustomReason');
            
            hideIndividualReturnErrors();
            
            if (!reasonSelect.value) {
                showIndividualReturnError('individualReturnReasonError');
                return false;
            }
            
            if (reasonSelect.value === 'Other' && !customReason.value.trim()) {
                showIndividualReturnError('individualCustomReasonError');
                return false;
            }
            
            return true;
        }

        async function submitIndividualReturnRequest() {
            if (!validateIndividualReturnForm()) {
                return;
            }
            
            const reasonSelect = document.getElementById('individualReturnReason');
            const customReason = document.getElementById('individualCustomReason');
            
            let reason = reasonSelect.value;
            if (reason === 'Other') {
                reason = customReason.value.trim();
            }
            
            try {
                // Show loading state
                const submitBtn = document.getElementById('submitIndividualReturnBtn');
                const originalText = submitBtn.innerHTML;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                submitBtn.disabled = true;
                
                // Make API call to return request endpoint
                const response = await fetch('/orders/<%= order.orderId %>/request-return', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        items: [{
                            itemId: currentIndividualItemId,
                            reason: reason
                        }],
                        requestType: 'individual' // Indicates this is an individual return request
                    })
                });

                const result = await response.json();

                if (result.success) {
                    closeIndividualReturnModal();
                    
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 4000,
                        timerProgressBar: true
                    });
                    Toast.fire({
                        icon: 'success',
                        title: result.message || `Return request submitted for "${currentIndividualItemName}"`
                    });
                    
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    // Reset button state
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;
                    
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 4000,
                        timerProgressBar: true
                    });
                    Toast.fire({
                        icon: 'error',
                        title: result.message || 'Failed to submit return request'
                    });
                }
            } catch (error) {
                console.error('Error submitting individual return request:', error);
                
                // Reset button state
                const submitBtn = document.getElementById('submitIndividualReturnBtn');
                submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Return Request';
                submitBtn.disabled = false;
                
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'bottom-right',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true
                });
                Toast.fire({
                    icon: 'error',
                    title: 'Failed to submit return request. Please try again.'
                });
            }
        }

        
        // Download PDF invoice
        async function downloadInvoice(orderId) {
            // Get the button that was clicked
            const downloadBtn = event.target.closest('.btn-download-invoice');
            const originalText = downloadBtn.innerHTML;

            try {
                // Show loading state
                downloadBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
                downloadBtn.disabled = true;

                // Make request to download invoice
                const response = await fetch(`/orders/${orderId}/download-invoice`);

                if (response.ok) {
                    // Get the PDF blob
                    const blob = await response.blob();

                    // Create download link
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `Invoice-${orderId}.pdf`;
                    document.body.appendChild(a);
                    a.click();

                    // Cleanup
                    window.URL.revokeObjectURL(url);
                    document.body.removeChild(a);

                    // Show success toast
                    const Toast = Swal.mixin({
                        toast: true,
                        position: 'bottom-right',
                        showConfirmButton: false,
                        timer: 3000,
                        timerProgressBar: true
                    });

                    Toast.fire({
                        icon: 'success',
                        title: 'Invoice downloaded successfully'
                    });
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Failed to download invoice');
                }
            } catch (error) {
                console.error('Error downloading invoice:', error);
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'bottom-right',
                    showConfirmButton: false,
                    timer: 4000,
                    timerProgressBar: true
                });
                Toast.fire({
                    icon: 'error',
                    title: error.message || 'Failed to download invoice. Please try again.'
                });
            } finally {
                // Reset button state
                downloadBtn.innerHTML = originalText;
                downloadBtn.disabled = false;
            }
        }
    </script>
</body>
</html>