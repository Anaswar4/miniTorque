<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Forgot Password OTP Verification</title>
   <link rel="icon" type="image/png" href="/images/miniTorque.png.png" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">

  <link rel="stylesheet" href="/css/user/forgot-verify-otp.css">

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <div class="otp-card">
    <h2>Verify Your OTP</h2>
    <p>Enter the 6-digit code sent to <strong><%= email %></strong></p>

    <div class="otp-container">
      <% for(let i=0; i<6; i++) { %>
        <input type="tel" inputmode="numeric" maxlength="1" class="otp-input" />
      <% } %>
    </div>

    <div id="error-message" class="error-message"></div>
    <div id="timer" class="timer">Timer: 01:00</div>
    <div id="timer-expired" class="timer-expired" style="display:none;">
      OTP expired. Please resend.
    </div>

    <div class="btn-group">
      <button id="verify-btn" disabled>Verify OTP</button>
      <button id="resend-btn" disabled>Resend OTP</button>
    </div>
  </div>

  <script>
    const inputs = document.querySelectorAll('.otp-input');
    const verifyBtn = document.getElementById('verify-btn');
    const resendBtn = document.getElementById('resend-btn');
    const timerEl = document.getElementById('timer');
    const timerExpiredEl = document.getElementById('timer-expired');
    const errorMsg = document.getElementById('error-message');
    
    let timeLeft = 60;
    let timer;

    // Start timer
    function startTimer() {
      timerEl.style.display = 'block';
      timerExpiredEl.style.display = 'none';
      resendBtn.disabled = true;
      verifyBtn.disabled = false;

      timer = setInterval(() => {
        timeLeft--;
        updateTimerDisplay();

        if (timeLeft <= 0) {
          clearInterval(timer);
          timerEl.style.display = 'none';
          timerExpiredEl.style.display = 'block';
          verifyBtn.disabled = true;
          resendBtn.disabled = false;
        }
      }, 1000);
    }

    function updateTimerDisplay() {
      const minutes = Math.floor(timeLeft / 60);
      const seconds = timeLeft % 60;
      timerEl.textContent = `Timer: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      timerEl.style.color = timeLeft <= 10 ? '#ff4d4d' : '#1a1a1a';
    }

    function getOTP() {
      return Array.from(inputs).map(i => i.value).join('');
    }

    function validateOTP(otp) {
      if (otp.length !== 6 || !/^\d{6}$/.test(otp)) {
        showError('Please enter a valid 6-digit code');
        return false;
      }
      return true;
    }

    function showError(message) {
      errorMsg.textContent = message;
      errorMsg.style.color = '#ff4d4d';
      setTimeout(() => (errorMsg.textContent = ''), 5000);
    }

    function handleInput(e, index) {
      const input = e.target;
      input.value = input.value.replace(/\D/g, '');
      if (input.value.length === 1 && index < inputs.length - 1) {
        inputs[index + 1].focus();
      }
      verifyBtn.disabled = getOTP().length !== 6 || timeLeft <= 0;
    }

    function handleBackspace(e, index) {
      if (e.key === 'Backspace' && !e.target.value && index > 0) {
        inputs[index - 1].focus();
      }
    }

    inputs.forEach((input, idx) => {
      input.addEventListener('input', (e) => handleInput(e, idx));
      input.addEventListener('keydown', (e) => handleBackspace(e, idx));
      input.addEventListener('paste', (e) => {
        e.preventDefault();
        const paste = e.clipboardData.getData('text').trim().replace(/\D/g, '');
        if (paste.length === 6) {
          inputs.forEach((i, j) => (i.value = paste[j] || ''));
          inputs[5].focus();
          verifyBtn.disabled = false;
        }
      });
    });

    verifyBtn.addEventListener('click', async () => {
      const otp = getOTP();
      if (!validateOTP(otp)) return;

      verifyBtn.disabled = true;
      verifyBtn.textContent = 'Verifying...';

      try {
        const res = await fetch('/forgot-verify-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ otp })
        });

        const data = await res.json();

        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'OTP Verified!',
            text: 'Redirecting...',
            timer: 1500,
            showConfirmButton: false
          }).then(() => {
            window.location.href = data.redirectUrl || '/reset-password';
          });
        } else {
          showError(data.message || 'Invalid OTP');
          verifyBtn.disabled = false;
          verifyBtn.textContent = 'Verify OTP';
        }
      } catch (err) {
        console.error(err);
        showError('Server error. Please try again.');
        verifyBtn.disabled = false;
        verifyBtn.textContent = 'Verify OTP';
      }
    });

    resendBtn.addEventListener('click', async () => {
      resendBtn.disabled = true;
      resendBtn.textContent = 'Sending...';

      try {
        const res = await fetch('/resend-forgot-verify-otp', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({})
        });

        const data = await res.json();

        if (data.success) {
          Swal.fire({
            icon: 'success',
            title: 'OTP Sent',
            text: 'Check your email for the new code',
            timer: 2000,
            showConfirmButton: false
          });

          inputs.forEach(input => input.value = '');
          inputs[0].focus();
          timeLeft = 60;
          startTimer();
        } else {
          showError(data.message || 'Failed to resend OTP');
        }
      } catch (err) {
        console.error(err);
        showError('Error resending OTP');
      } finally {
        resendBtn.textContent = 'Resend OTP';
        resendBtn.disabled = false;
      }
    });

    // Start everything
    startTimer();
    inputs[0].focus();
  </script>
</body>
</html>
